{"version":3,"sources":["components/hoc/withAuthRedirect.js","api/api.ts","components/Navbar/Navbar.module.css","redux/dialogs-reducer.ts","assets/images/user.png","assets/images/loading.svg","components/common/FormsControls/FormsControls.tsx","serviceWorker.js","components/Settings/Settings.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Navbar/FriendsItem/FriendsItem.tsx","components/Navbar/Navbar.tsx","components/Navbar/NavbarContainer.tsx","utils/object-helpers.ts","api/users-api.ts","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Header/HeaderContainer.jsx","components/Login/Login.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","components/hoc/withSuspense.js","App.js","index.js","components/common/Preloader/Preloader.js","components/common/FormsControls/FormsControls.module.css","components/Users/Users.module.css","utils/validators/validators.ts","components/Navbar/FriendsItem/FriendsItem.module.css","components/common/Paginator/Paginator.module.css","components/Header/Header.module.css","api/profile-api.ts","redux/profile-reducer.ts"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","ResultCodesEnum","ResultCodeForCaptchaEnum","instance","axios","create","withCredentials","baseURL","headers","module","exports","initialState","messages","id","message","dialogsData","name","actions","addMessageActionCreator","newMessageBody","type","dialogsReducer","action","newMessage","FormControl","meta","touched","error","children","hasError","className","styles","formControl","TextArea","input","restProps","Input","createField","placeholder","validators","component","text","validate","Boolean","window","location","hostname","match","Settings","News","Music","group","song","defaultProps","FriendsItem","path","s","friend","activeClassName","activeLink","src","alt","friendName","Navbar","friendsElements","friends","map","d","iconAddress","key","app_nav","navList","item","active","friendsItems","NavbarContainer","sidebar","updateObjectInArray","items","itemId","objPropName","newObjProps","u","usersAPI","getUsers","currentPage","pageSize","get","then","res","data","unfollowUser","userId","delete","followUser","post","users","totalUsersCount","isFetching","followingInProgress","count","_followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","followed","filter","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginatorsRow","onClick","p","cn","selectedPage","pageNumber","e","User","user","unfollow","follow","photoUser","photos","small","userPhoto","disabled","some","status","Users","paginatorUsers","usersPage","getUsersSuperSelector","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageTitle","Preloader","compose","bind","page","getState","totalCount","Header","app_header","loginBlock","loginBlock_accPlusLogout","login","logout","authAPI","email","password","rememberMe","captcha","securityAPI","captchaUrl","payload","setMyProfileData","meData","Success","getCaptchaUrl","url","authReducer","HeaderContainer","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","required","undefined","formSummaryError","CaptchaIsRequired","length","stopSubmit","_error","formData","initialized","appReducer","isFriend","sidebarReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","App","catchAllUnhandledErrors","reason","alert","initializeApp","addEventListener","removeEventListener","exact","render","AppContainer","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","preloader","value","maxLengthCreator","maxLength","profileAPI","put","photoFile","FormData","append","profile","posts","likesCount","addPostActionCreator","postText","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","getUserInformation","getStatus","updateStatus","savePhoto","file","saveProfile","Error","Promise","reject","newPost"],"mappings":"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","file":"static/js/main.841eb1fc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"7f79b91b-2e45-4e21-b6d5-aacbccd686ed\"\r\n    }\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app_nav\":\"Navbar_app_nav__MvB8r\",\"navList\":\"Navbar_navList__t5k0U\",\"item\":\"Navbar_item__3-bYs\",\"activeLink\":\"Navbar_activeLink__3L5WZ\",\"friends\":\"Navbar_friends__zAibx\",\"friendsItems\":\"Navbar_friendsItems__3qudn\"};","import {strict} from \"assert\";\r\nimport {InferActionsTypes} from \"./redux-store\";\r\n\r\ntype DialogType = {\r\n    id: number;\r\n    name: string;\r\n};\r\ntype MessageType = {\r\n    id: number;\r\n    message: string;\r\n};\r\n\r\nconst initialState = {\r\n    messages: [\r\n        {id: 1, message: \"Hello\"},\r\n        {id: 2, message: \"It-Kamasutra\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"sfsdfsdf\"},\r\n        {id: 5, message: \"dddfffffddddd\"},\r\n    ] as Array<MessageType>,\r\n    dialogsData: [\r\n        {id: 1, name: \"Artem\"},\r\n        {id: 2, name: \"Victor\"},\r\n        {id: 3, name: \"Sveta\"},\r\n        {id: 4, name: \"Nikolay\"},\r\n        {id: 5, name: \"Dimich\"},\r\n        {id: 6, name: \"Gregorii\"},\r\n        {id: 7, name: \"Gena\"},\r\n    ] as Array<DialogType>,\r\n};\r\n\r\n\r\nconst dialogsReducer = (\r\n    state = initialState,\r\n    action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/DIALOGS/ADD-MESSAGE\": {\r\n            let newMessage = {\r\n                id: 5,\r\n                message: action.newMessageBody,\r\n            };\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage],\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addMessageActionCreator: (newMessageBody: string) => ({type: \"SN/DIALOGS/ADD-MESSAGE\", newMessageBody} as const)\r\n}\r\n\r\nexport default dialogsReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n","module.exports = __webpack_public_path__ + \"static/media/user.93a57c9f.png\";","module.exports = __webpack_public_path__ + \"static/media/loading.27fc27b6.svg\";","import React from \"react\"\r\nimport styles from \"./FormsControls.module.css\"\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\"\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\"\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TextArea: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props} > <textarea {...input}{...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props} > <input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\n\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                            name: FormKeysType,\r\n                            validators: Array<FieldValidatorType>,\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            props = {},\r\n                            text = \"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\n// import s from \"./Settings.module.css\";\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            <p>Settings</p>\r\n        </div>\r\n    );\r\n};\r\nexport default Settings;","import React from \"react\";\r\n// import s from \"./News.module.css\";\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            <p>News</p>\r\n        </div>\r\n    );\r\n};\r\nexport default News;","import React from \"react\";\r\n// import s from \"./Music.module.css\";\r\n\r\ntype PropsType = {\r\n    group: string\r\n    song: string\r\n}\r\n\r\nconst Music: React.FC<PropsType> = ({group, song}) => {\r\n    return (\r\n        <div>\r\n            <h3>Music</h3>\r\n            <h5>{group}</h5>\r\n            <p>{song}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nMusic.defaultProps = {\r\n    group: 'Red Hot Chili Papers',\r\n    song: 'Hello world!'\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport s from \"./FriendsItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    id: number\r\n    path: string\r\n    name: string\r\n\r\n}\r\n\r\nconst FriendsItem: React.FC<PropsType> = (props) => {\r\n    let path = \"/friends/\" + props.id;\r\n    return (\r\n        <div className={s.friend}>\r\n            <NavLink to={path} activeClassName={s.activeLink}>\r\n                <img src={props.path} alt=\"\"/>\r\n                <p className={s.friendName}>{props.name}</p>\r\n            </NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FriendsItem\r\n","import React from \"react\";\r\nimport s from \"./Navbar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport FriendsItem from \"./FriendsItem/FriendsItem\";\r\n\r\n export type FriendType = {\r\n    id: number\r\n    name: string\r\n    iconAddress: string\r\n    isFriend: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    friends: Array<FriendType>\r\n\r\n}\r\n\r\nconst Navbar: React.FC<PropsType> = (props) => {\r\n    let friendsElements = props.friends.map((d) => (\r\n        <FriendsItem name={d.name} id={d.id} path={d.iconAddress} key={d.id}/>\r\n    ));\r\n\r\n    return (\r\n        <nav className={s.app_nav}>\r\n            <ul className={s.navList}>\r\n                <li className={s.item}>\r\n                    <NavLink to=\"/profile\" activeClassName={s.activeLink}>\r\n                        Profile\r\n                    </NavLink>\r\n                </li>\r\n                <li className={`${s.item} ${s.active}`}>\r\n                    <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>\r\n                        Messages\r\n                    </NavLink>\r\n                </li>\r\n                <li className={s.item}>\r\n                    <NavLink to=\"/news\" activeClassName={s.activeLink}>\r\n                        News\r\n                    </NavLink>\r\n                </li>\r\n                <li className={s.item}>\r\n                    <NavLink to=\"/music\" activeClassName={s.activeLink}>\r\n                        Music\r\n                    </NavLink>\r\n                </li>\r\n                <li className={s.item}>\r\n                    <NavLink to=\"/users\" activeClassName={s.activeLink}>\r\n                        Users\r\n                    </NavLink>\r\n                </li>\r\n                <li className={s.item}>\r\n                    <NavLink to=\"/settings\" activeClassName={s.activeLink}>\r\n                        Settings\r\n                    </NavLink>\r\n                </li>\r\n            </ul>\r\n            <div className={s.friends}>\r\n                <h3>Friends</h3>\r\n                <div className={s.friendsItems}>{friendsElements}</div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\nexport default Navbar","import {connect} from \"react-redux\";\r\nimport Navbar, {FriendType} from \"./Navbar\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    friends: FriendType\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        friends: state.sidebar.friends\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = () => {\r\n    return {}\r\n}\r\n\r\nconst NavbarContainer = connect(mapStateToProps, mapDispatchToProps)(Navbar)\r\n\r\nexport default NavbarContainer;\r\n","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u\r\n    })\r\n}\r\n","import {GetItemsType, instance, APIResponseType} from \"./api\"\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance\r\n            .get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(res => res.data);\r\n    },\r\n    unfollowUser(userId: number) {\r\n        return instance\r\n            .delete(`follow/` + userId).then(res => res.data) as Promise<APIResponseType>\r\n    },\r\n    followUser(userId: number) {\r\n        return instance\r\n            .post<APIResponseType>(`follow/` + userId)\r\n            .then(res => res.data)\r\n    },\r\n\r\n}","import {updateObjectInArray} from \"../utils/object-helpers\";\r\nimport {PhotosType, UserType} from \"../types/types\";\r\nimport {AppStateType, BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {usersAPI} from \"../api/users-api\";\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 20,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number> //array of users ids\r\n};\r\n\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialState => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            }\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            }\r\n        case 'SN/USERS/SET_USERS':\r\n            return {...state, users: action.users}\r\n\r\n        case 'SN/USERS/SET_CURRENT_PAGE':\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT':\r\n            return {...state, totalUsersCount: action.count}\r\n\r\n        case 'SN/USERS/TOGGLE_IS_FETCHING':\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({\r\n        type: 'SN/USERS/SET_CURRENT_PAGE',\r\n        currentPage\r\n    } as const),\r\n    setUsersTotalCount: (totalUsersCount: number) => ({\r\n        type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\r\n        count: totalUsersCount\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FETCHING',\r\n        isFetching\r\n    } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userId\r\n    } as const)\r\n}\r\n\r\n\r\nexport const requestUsers = (page: number, pageSize: number):\r\n    ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setCurrentPage(page));\r\n        dispatch(actions.toggleIsFetching(true));\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize);\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setUsersTotalCount(data.totalCount));\r\n        dispatch(actions.toggleIsFetching(false));\r\n    }\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>, userId: number, apiMethod: any, actionCreator: (userId: number)\r\n    => ActionsTypes) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.followUser.bind(usersAPI), actions.followSuccess);\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollowUser.bind(usersAPI), actions.unfollowSuccess);\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype InitialState = typeof initialState;\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n","import React, {useState} from 'react'\r\nimport s from './Paginator.module.css'\r\nimport cn from 'classnames'\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nconst Paginator: React.FC<PropsType> = ({\r\n                                        totalItemsCount,\r\n                                        pageSize,\r\n                                        currentPage,\r\n                                        onPageChanged,\r\n                                        portionSize = 10\r\n                                    }) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return <div className={s.paginatorsRow}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber - 1)\r\n        }}>Prev</button>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span key={p} className={cn({\r\n                    [s.selectedPage]: currentPage === p\r\n                }, s.pageNumber)}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p)\r\n                             }}>{p}</span>\r\n\r\n            })}\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n        }}>Next</button>}\r\n    </div>\r\n\r\n}\r\nexport default Paginator;","import React from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nlet User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n    return (\r\n        <div>\r\n            <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + user.id}>\r\n                            <img className={s.photoUser} src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                                 alt=\"\"/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed\r\n                            ? <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                                unfollow(user.id);\r\n                            }}>\r\n                                Unfollow\r\n                            </button>\r\n\r\n                            : <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                                follow(user.id);\r\n                            }}>\r\n                                Follow\r\n                            </button>}\r\n                    </div>\r\n            </span>\r\n            <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"user.location.country\"}</div>\r\n                        <div>{\"user.location.city\"}</div>\r\n                    </span>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\nexport default User","import React from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nlet Users: React.FC<PropsType> = ({currentPage, onPageChanged, totalUsersCount, pageSize, users, ...props}) => {\r\n\r\n    return <div className={s.users}>\r\n        <div className={s.paginatorUsers}>\r\n            <Paginator currentPage={currentPage}\r\n                       onPageChanged={onPageChanged}\r\n                       totalItemsCount={totalUsersCount}\r\n                       pageSize={pageSize}\r\n            /></div>\r\n        <div>\r\n            {\r\n                users.map(u => <User key={u.id}\r\n                                     user={u}\r\n                                     followingInProgress={props.followingInProgress}\r\n                                     unfollow={props.unfollow}\r\n                                     follow={props.follow}\r\n                />)\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\nexport default Users;","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsersSelector = (state: AppStateType) => {\r\n    return getUsers(state).filter(u => true);\r\n}\r\n\r\nexport const getUsersSuperSelector = createSelector(getUsers, (users) => {\r\n    return users.filter(u => true)\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}","import {connect} from \"react-redux\";\r\nimport {\r\n    follow, requestUsers,\r\n    unfollow\r\n} from \"../../redux/users-reducer\";\r\nimport React from \"react\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount, getUsersSuperSelector\r\n} from \"../../redux/users-selectors\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {AppStateType} from \"../../redux/redux-store\"\r\n\r\ntype MapStatePropsType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    isFetching: boolean\r\n    totalUsersCount: number\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\ntype OwnPropsType = {\r\n    pageTitle: string\r\n}\r\n\r\ntype PropsType = OwnPropsType & MapDispatchPropsType & MapStatePropsType\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        const {currentPage,pageSize} = this.props;\r\n        this.props.getUsers(currentPage, pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize} = this.props\r\n        this.props.getUsers(pageNumber, pageSize);\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            <h2>{this.props.pageTitle}</h2>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                users={this.props.users}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                followingInProgress={this.props.followingInProgress}\r\n\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsersSuperSelector(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    //<TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        getUsers: requestUsers\r\n    })\r\n)(UsersContainer)","import React from \"react\";\r\nimport s from \"./Header.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    login: string\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <header className={s.app_header}>\r\n            <img\r\n                src=\"https://github.com/PirialMersus/frontend-js/blob/master/menu/img/logo.png?raw=true\"\r\n                alt=\"logo\"\r\n            />\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth ? <div className={s.loginBlock_accPlusLogout}><p>{props.login}</p>\r\n                    <button onClick={props.logout}>Log out</button>\r\n                </div> : <NavLink to={'/login'}>Login</NavLink>}\r\n\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\nexport default Header;\r\n","import {instance, APIResponseType, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance\r\n            .get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance\r\n            .post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>>('auth/login', {email, password, rememberMe, captcha})\r\n            .then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance\r\n            .delete('auth/login');\r\n    }\r\n\r\n}","import {instance} from \"./api\";\r\n\r\ntype GetCaptchaUrlResonceType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance\r\n            .get<GetCaptchaUrlResonceType>('security/get-captcha-url')\r\n            .then(res => res.data)\r\n    }\r\n}","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../api/api\"\r\nimport {FormAction, stopSubmit} from \"redux-form\"\r\nimport {Action, Dispatch} from \"redux\"\r\nimport {ThunkAction} from \"redux-thunk\"\r\nimport {AppStateType, BaseThunkType, InferActionsTypes} from \"./redux-store\"\r\nimport {authAPI} from \"../api/auth-api\"\r\nimport {securityAPI} from \"../api/security-api\"\r\n\r\nconst initialState = {\r\n    userId: null as null | number,\r\n    email: null as null | string,\r\n    login: null as null | string,\r\n    isAuth: false,\r\n    captchaUrl: null as null | string\r\n}\r\n\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/auth/SET_USER_DATA\":\r\n        case \"SN/auth/GET_CAPTCHA_URL_SUCCESS\":\r\n\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: \"SN/auth/SET_USER_DATA\", payload: {userId, email, login, isAuth}\r\n    } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: \"SN/auth/GET_CAPTCHA_URL_SUCCESS\",\r\n        payload: {captchaUrl}\r\n    }as const),\r\n}\r\n\r\n\r\nexport const setMyProfileData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me();\r\n\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        let {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(setMyProfileData());\r\n    } else {\r\n        if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n        const message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch: any) => {\r\n    let response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch: any) => {\r\n    const data = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = data.url\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport default authReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType= BaseThunkType<ActionsType | FormAction>\r\n\r\n","import React from \"react\";\r\n\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\nclass HeaderContainer extends React.Component {\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);\r\n","import React from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {createField, Input } from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport s from \"./../common/FormsControls/FormsControls.module.css\"\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> =\r\n    ({handleSubmit, error, captchaUrl}) => {\r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n\r\n                {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], Input)}\r\n                {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n                {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n\r\n                {captchaUrl && <img alt={\"\"} src={captchaUrl}/>}\r\n                {captchaUrl && createField<LoginFormValuesTypeKeys>(\"Captcha text\", \"captcha\", [required], Input, {})\r\n                }\r\n                {/*{captchaUrl && <Field placeholder={\"Captcha text\"}*/}\r\n                {/*                      name={\"captcha\"}*/}\r\n                {/*                      component={Input}*/}\r\n                {/*/>}*/}\r\n\r\n\r\n                {error && <div className={s.formSummaryError}>\r\n                    {error}\r\n                </div>}\r\n                <div>\r\n                    <button>Login</button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);\r\n\r\ntype MapStatePropsType = {\r\n    captchaUrl: string | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: any, captcha: string) => void\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginFormValuesTypeKeys = Extract<keyof LoginFormValuesType, string>\r\n\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect(mapStateToProps, {login})(Login);","import { Dispatch } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport {setMyProfileData} from \"./auth-reducer\";\r\nimport {AppStateType, InferActionsTypes} from \"./redux-store\";\r\n\r\nconst INITIALIZED_SUCCESS = \"SN/APP/INITIALIZED_SUCCESS\";\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType  => {\r\n    switch (action.type) {\r\n        case \"SN/APP/INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: \"SN/APP/INITIALIZED_SUCCESS\",} as const),\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(setMyProfileData());\r\n    promise\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        })\r\n}\r\n\r\nexport default appReducer;","type FriendType = {\r\n    id: number\r\n    name: string\r\n    iconAddress:string\r\n    isFriend: boolean\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    friends: [\r\n        {\r\n            id: 1,\r\n            name: \"Andrey\",\r\n            iconAddress:\r\n                \"https://vashsport.com/wp-content/uploads/motivaciya-v-sporte-640x440.jpg\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Gena\",\r\n            iconAddress:\r\n                \"https://static10.tgstat.ru/channels/_0/b5/b5bcf9a66a2fd7998922d87c55acf2f3.jpg\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Anatolii\",\r\n            iconAddress:\r\n                \"https://miro.medium.com/max/2560/0*-JLWzLp-DtyCfIo_.jpg\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Kirill\",\r\n            iconAddress:\r\n                \"https://i.pinimg.com/originals/73/cb/81/73cb8185bbc42d96b2799eb30389f176.jpg\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Alexandr emelianenko\",\r\n            iconAddress:\r\n                \"https://m.allboxing.ru/sites/default/files/styles/large/public/052_fedor_emelianenko_x_rampage_jackson.0_0.jpg?itok=lkCYQxio\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 6,\r\n            name: \"Andrey\",\r\n            iconAddress:\r\n                \"https://vashsport.com/wp-content/uploads/motivaciya-v-sporte-640x440.jpg\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 7,\r\n            name: \"Gena\",\r\n            iconAddress:\r\n                \"https://static10.tgstat.ru/channels/_0/b5/b5bcf9a66a2fd7998922d87c55acf2f3.jpg\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 8,\r\n            name: \"Anatolii\",\r\n            iconAddress:\r\n                \"https://miro.medium.com/max/2560/0*-JLWzLp-DtyCfIo_.jpg\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 9,\r\n            name: \"Kirill\",\r\n            iconAddress:\r\n                \"https://i.pinimg.com/originals/73/cb/81/73cb8185bbc42d96b2799eb30389f176.jpg\",\r\n            isFriend: true,\r\n        },\r\n    ]  as Array<FriendType>,\r\n}\r\n\r\n\r\nconst sidebarReducer = (state = initialState, action: any): InitialStateType => {\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {applyMiddleware, combineReducers, createStore, compose, Action} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\"\r\nimport appReducer from \"./app-reducer\";\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n })\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\ntype PropertiesTypes<T> = T extends {[key: string]: infer U} ? U : never\r\nexport type InferActionsTypes<T extends {[key: string]: (...args: any[])=> any}> = ReturnType<PropertiesTypes<T>>\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store\r\n\r\n","import React from \"react\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\n\r\nexport const withSuspense = (Component) => {\r\n\r\n    return (props) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n            <Component {...props} />\r\n        </React.Suspense>\r\n    }\r\n}\r\n","/* eslint-disable jsx-a11y/alt-text */\nimport React from \"react\";\n// import \"antd/dist/antd.css\";\n// import { StepForwardOutlined } from '@ant-design/icons';\n// import { Button } from 'antd';\n\nimport \"./App.css\";\n\nimport {HashRouter, Route, Switch, Redirect} from \"react-router-dom\";\nimport Settings from \"./components/Settings/Settings\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport NavbarContainer from \"./components/Navbar/NavbarContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport LoginPage from \"./components/Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport store from \"./redux/redux-store\";\nimport {withSuspense} from \"./components/hoc/withSuspense\";\n\n\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"));\n\nclass App extends React.Component {\n\n    catchAllUnhandledErrors = (reason) => {\n        // debugger\n        alert(reason.reason.message);\n    }\n\n    componentDidMount() {\n\n        this.props.initializeApp();\n        window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <HashRouter>\n                <div className=\"app-wrapper\">\n                    <HeaderContainer/>\n                    <NavbarContainer/>\n                    <div className=\"app-wrapper-content\">\n                        <Switch>\n                            <Route\n                                exact path=\"/\"\n                                render={() => <Redirect to={\"/profile\"}/>}\n                            />\n                            <Route\n                                path=\"/profile/:userId?\"\n                                render={withSuspense(ProfileContainer)}\n                            />\n                            <Route\n                                path=\"/dialogs\"\n                                render={withSuspense(DialogsContainer)}\n                            />\n                            <Route\n                                path=\"/users\"\n                                render={() => (\n                                    <UsersContainer pageTitle={\"Samurai\"}/>\n                                )}\n                            />\n                            <Route\n                                path=\"/login\"\n                                render={() => (\n                                    <LoginPage/>\n                                )}\n                            />\n                            <Route path=\"/settings\" render={() => <Settings/>}/>\n                            <Route path=\"/news\" render={() => <News/>}/>\n                            <Route path=\"/music\" render={() => <Music/>}/>\n                            <Route path=\"*\" render={() => <div>404 NOT FOUND\n                                {/*<Button>Ok</Button>*/}\n                                {/*<StepForwardOutlined />*/}\n                                </div>}/>\n                        </Switch>\n                    </div>\n                </div>\n            </HashRouter>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    initialized: state.app.initialized\n})\n\nconst AppContainer = connect(mapStateToProps, {initializeApp})(App);\n\nexport const SamuraiJsApp = () => {\n    return <Provider store={store}>\n        <AppContainer/>\n    </Provider>\n}\n\n","import \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {SamuraiJsApp} from \"./App\";\n\n\nReactDOM.render(\n    <SamuraiJsApp />,\n    document.getElementById(\"root\")\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import preloader from \"../../../assets/images/loading.svg\";\r\nimport React from \"react\";\r\n\r\nlet Preloader = (props) => {\r\n    return <img alt={\"\"} src={preloader}/>\r\n}\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1SDyZ\",\"error\":\"FormsControls_error__cTaDO\",\"formSummaryError\":\"FormsControls_formSummaryError__1pKVV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__2x1XG\",\"photoUser\":\"Users_photoUser__2oo1c\",\"pageNumbers\":\"Users_pageNumbers__1JgmY\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value: string): string | undefined => {\r\n    if (value) {\r\n        return undefined;\r\n    }\r\n    return 'Field is required';\r\n\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value && value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`;\r\n    }\r\n    return undefined;\r\n}\r\nexport const maxLength10 = (value: string) => {\r\n    if (value.length > 10) {\r\n        return `Max length is 10 symbols`;\r\n    }\r\n    return undefined;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend\":\"FriendsItem_friend__1UraJ\",\"activeLink\":\"FriendsItem_activeLink__1DeBC\",\"friendName\":\"FriendsItem_friendName__11QHv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__2wqhL\",\"paginatorsRow\":\"Paginator_paginatorsRow__eZ5tb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app_header\":\"Header_app_header__HNDjg\",\"loginBlock\":\"Header_loginBlock__3rqTz\",\"loginBlock_accPlusLogout\":\"Header_loginBlock_accPlusLogout__1B2Gw\"};","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getUserProfile(userId: number) {\r\n        return instance\r\n            .get<ProfileType>(`profile/` + userId)\r\n            .then(res => res.data);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance\r\n            .get<string>('profile/status/' + userId)\r\n            .then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance\r\n            .put<APIResponseType>('profile/status', {status: status})\r\n            .then(res => res.data)\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData;\r\n        formData.append(\"image\", photoFile);\r\n        return instance\r\n            .put<APIResponseType<SavePhotoResponseDataType>>('profile/photo', formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            })\r\n            .then(res => res.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance\r\n            .put<APIResponseType>('profile', profile)\r\n            .then(res => res.data)\r\n    }\r\n}","import {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType, BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {usersAPI} from \"../api/users-api\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {id: 1, message: \"It's my first post\", likesCount: 15},\r\n        {id: 2, message: \"Hello, how are you?\", likesCount: 45},\r\n        {id: 3, message: \"Hello, mersus?\", likesCount: 48},\r\n        {id: 4, message: \"Hello, pirial?\", likesCount: 40},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\",\r\n\r\n}\r\n\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/PROFILE/ADD-POST\": {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.postText,\r\n                likesCount: 0,\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            };\r\n        }\r\n        case \"SN/PROFILE/SET_USER_PROFILE\": {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        }\r\n        case \"SN/PROFILE/SET_STATUS\": {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        }\r\n        case \"SN/PROFILE/DELETE_POST\": {\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.postId)}\r\n        }\r\n        case \"SN/PROFILE/SAVE_PHOTO_SUCCESS\": {\r\n            return {...state, profile: {...state.profile, photos: action.photos}as ProfileType}\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (postText: string) => ({type: \"SN/PROFILE/ADD-POST\", postText} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: \"SN/PROFILE/SET_USER_PROFILE\", profile} as const),\r\n    setStatus: (status: string) => ({type: \"SN/PROFILE/SET_STATUS\", status} as const),\r\n    deletePost: (postId: number) => ({type: \"SN/PROFILE/DELETE_POST\", postId} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: \"SN/PROFILE/SAVE_PHOTO_SUCCESS\", photos} as const)\r\n}\r\n\r\n\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionsType>\r\n// type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n\r\nexport const getUserInformation = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getUserProfile(userId);\r\n    dispatch(actions.setUserProfile(data));\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getStatus(userId)\r\n    dispatch(actions.setStatus(data));\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.updateStatus(status)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.setStatus(status));\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.savePhoto(file)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId;\r\n    const data = await profileAPI.saveProfile(profile);\r\n\r\n    if (data.resultCode === 0) {\r\n        if (userId !== null){\r\n            dispatch(getUserInformation(userId))\r\n        } else {\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}));\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n}\r\n\r\nexport default profileReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>"],"sourceRoot":""}