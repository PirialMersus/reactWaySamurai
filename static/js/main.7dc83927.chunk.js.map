{"version":3,"sources":["api/api.ts","components/Navbar/Navbar.module.css","redux/dialogs-reducer.ts","assets/images/user.png","assets/images/loading.svg","components/common/FormsControls/FormsControls.tsx","serviceWorker.js","components/Settings/Settings.tsx","components/News/News.tsx","components/Navbar/FriendsItem/FriendsItem.tsx","components/Navbar/Navbar.tsx","components/Navbar/NavbarContainer.tsx","utils/object-helpers.ts","api/users-api.ts","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","components/hoc/withSuspense.tsx","App.tsx","index.tsx","components/common/Preloader/Preloader.tsx","components/common/FormsControls/FormsControls.module.css","components/Users/Users.module.css","utils/validators/validators.ts","components/Navbar/FriendsItem/FriendsItem.module.css","components/common/Paginator/Paginator.module.css","components/Header/Header.module.css","api/profile-api.ts","redux/profile-reducer.ts"],"names":["ResultCodesEnum","ResultCodeForCaptchaEnum","instance","axios","create","withCredentials","baseURL","headers","module","exports","initialState","messages","id","message","dialogsData","name","actions","sendMessage","newMessageBody","type","dialogsReducer","state","action","newMessage","FormControl","meta","touched","error","children","hasError","className","styles","formControl","TextArea","props","input","restProps","Input","createField","placeholder","validators","component","text","validate","Boolean","window","location","hostname","match","Settings","News","FriendsItem","path","s","friend","to","activeClassName","activeLink","src","alt","friendName","Navbar","friendsElements","friends","map","d","iconAddress","key","app_nav","navList","item","active","friendsItems","NavbarContainer","connect","sidebar","updateObjectInArray","items","itemId","objPropName","newObjProps","u","usersAPI","getUsers","currentPage","pageSize","get","then","res","data","unfollow","userId","delete","follow","post","users","totalUsersCount","isFetching","followingInProgress","count","_followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","followed","filter","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginatorsRow","onClick","p","cn","selectedPage","pageNumber","e","User","user","photoUser","photos","small","userPhoto","disabled","some","status","Users","paginatorUsers","usersPage","getUsersSuperSelector","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","this","pageTitle","Preloader","React","Component","compose","bind","page","getState","totalCount","Header","app_header","loginBlock","isAuth","loginBlock_accPlusLogout","login","logout","authAPI","email","password","rememberMe","captcha","securityAPI","captchaUrl","payload","setMyProfileData","meData","Success","getCaptchaUrl","url","authReducer","HeaderContainer","auth","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","required","undefined","formSummaryError","CaptchaIsRequired","length","stopSubmit","_error","formData","initialized","appReducer","isFriend","sidebarReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","WrappedComponent","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","SuspendedDialogs","SuspendedProfile","App","catchAllUnhandledErrors","alert","reason","initializeApp","addEventListener","removeEventListener","exact","render","AppContainer","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","preloader","value","maxLengthCreator","maxLength","profileAPI","put","photoFile","FormData","append","profile","posts","likesCount","addPostActionCreator","postText","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","getUserInformation","getStatus","updateStatus","savePhoto","file","saveProfile","Error","Promise","reject","newPost"],"mappings":"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","file":"static/js/main.7dc83927.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"7f79b91b-2e45-4e21-b6d5-aacbccd686ed\"\r\n    }\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app_nav\":\"Navbar_app_nav__MvB8r\",\"navList\":\"Navbar_navList__t5k0U\",\"item\":\"Navbar_item__3-bYs\",\"activeLink\":\"Navbar_activeLink__3L5WZ\",\"friends\":\"Navbar_friends__zAibx\",\"friendsItems\":\"Navbar_friendsItems__3qudn\"};","import {strict} from \"assert\";\r\nimport {InferActionsTypes} from \"./redux-store\";\r\n\r\ntype DialogType = {\r\n    id: number;\r\n    name: string;\r\n};\r\ntype MessageType = {\r\n    id: number;\r\n    message: string;\r\n};\r\n\r\nconst initialState = {\r\n    messages: [\r\n        {id: 1, message: \"Hello\"},\r\n        {id: 2, message: \"It-Kamasutra\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"sfsdfsdf\"},\r\n        {id: 5, message: \"dddfffffddddd\"},\r\n    ] as Array<MessageType>,\r\n    dialogsData: [\r\n        {id: 1, name: \"Artem\"},\r\n        {id: 2, name: \"Victor\"},\r\n        {id: 3, name: \"Sveta\"},\r\n        {id: 4, name: \"Nikolay\"},\r\n        {id: 5, name: \"Dimich\"},\r\n        {id: 6, name: \"Gregorii\"},\r\n        {id: 7, name: \"Gena\"},\r\n    ] as Array<DialogType>,\r\n};\r\n\r\n\r\nconst dialogsReducer = (\r\n    state = initialState,\r\n    action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/DIALOGS/ADD-MESSAGE\": {\r\n            let newMessage = {\r\n                id: 5,\r\n                message: action.newMessageBody,\r\n            };\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage],\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageBody: string) => ({type: \"SN/DIALOGS/ADD-MESSAGE\", newMessageBody} as const)\r\n}\r\n\r\nexport default dialogsReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n","module.exports = __webpack_public_path__ + \"static/media/user.93a57c9f.png\";","module.exports = __webpack_public_path__ + \"static/media/loading.27fc27b6.svg\";","import React from \"react\"\r\nimport styles from \"./FormsControls.module.css\"\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\"\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\"\r\nimport {LoginFormValuesType} from \"../../Login/Login\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TextArea: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props} > <textarea {...input}{...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props} > <input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\n\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                            name: FormKeysType,\r\n                            validators: Array<FieldValidatorType>,\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            props = {},\r\n                            text = \"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\n\r\nexport type GetStringKeyS<T> = Extract<keyof T, string>","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\n// import s from \"./Settings.module.css\";\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            <p>Settings</p>\r\n        </div>\r\n    );\r\n};\r\nexport default Settings;","import React from \"react\";\r\n// import s from \"./News.module.css\";\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            <p>News</p>\r\n        </div>\r\n    );\r\n};\r\nexport default News;","import React from \"react\";\r\nimport s from \"./FriendsItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    id: number\r\n    path: string\r\n    name: string\r\n\r\n}\r\n\r\nconst FriendsItem: React.FC<PropsType> = (props) => {\r\n    let path = \"/friends/\" + props.id;\r\n    return (\r\n        <div className={s.friend}>\r\n            <NavLink to={path} activeClassName={s.activeLink}>\r\n                <img src={props.path} alt=\"\"/>\r\n                <p className={s.friendName}>{props.name}</p>\r\n            </NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FriendsItem\r\n","import React from \"react\";\r\nimport s from \"./Navbar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport FriendsItem from \"./FriendsItem/FriendsItem\";\r\n\r\n export type FriendType = {\r\n    id: number\r\n    name: string\r\n    iconAddress: string\r\n    isFriend: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    friends: Array<FriendType>\r\n\r\n}\r\n\r\nconst Navbar: React.FC<PropsType> = (props) => {\r\n    let friendsElements = props.friends.map((d) => (\r\n        <FriendsItem name={d.name} id={d.id} path={d.iconAddress} key={d.id}/>\r\n    ));\r\n\r\n    return (\r\n        <nav className={s.app_nav}>\r\n            <ul className={s.navList}>\r\n                <li className={s.item}>\r\n                    <NavLink to=\"/profile\" activeClassName={s.activeLink}>\r\n                        Profile\r\n                    </NavLink>\r\n                </li>\r\n                <li className={`${s.item} ${s.active}`}>\r\n                    <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>\r\n                        Messages\r\n                    </NavLink>\r\n                </li>\r\n                <li className={s.item}>\r\n                    <NavLink to=\"/news\" activeClassName={s.activeLink}>\r\n                        News\r\n                    </NavLink>\r\n                </li>\r\n                <li className={s.item}>\r\n                    <NavLink to=\"/music\" activeClassName={s.activeLink}>\r\n                        Music\r\n                    </NavLink>\r\n                </li>\r\n                <li className={s.item}>\r\n                    <NavLink to=\"/users\" activeClassName={s.activeLink}>\r\n                        Users\r\n                    </NavLink>\r\n                </li>\r\n                <li className={s.item}>\r\n                    <NavLink to=\"/settings\" activeClassName={s.activeLink}>\r\n                        Settings\r\n                    </NavLink>\r\n                </li>\r\n            </ul>\r\n            <div className={s.friends}>\r\n                <h3>Friends</h3>\r\n                <div className={s.friendsItems}>{friendsElements}</div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\nexport default Navbar","import {connect} from \"react-redux\";\r\nimport Navbar, {FriendType} from \"./Navbar\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    friends: FriendType\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        friends: state.sidebar.friends\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = () => {\r\n    return {}\r\n}\r\n\r\nconst NavbarContainer = connect(mapStateToProps, mapDispatchToProps)(Navbar)\r\n\r\nexport default NavbarContainer;\r\n","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u\r\n    })\r\n}\r\n","import {GetItemsType, instance, APIResponseType} from \"./api\"\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance\r\n            .get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(res => res.data);\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance\r\n            .delete(`follow/` + userId).then(res => res.data) as Promise<APIResponseType>\r\n    },\r\n    follow(userId: number) {\r\n        return instance\r\n            .post<APIResponseType>(`follow/` + userId)\r\n            .then(res => res.data)\r\n    },\r\n\r\n}","import {updateObjectInArray} from \"../utils/object-helpers\";\r\nimport {PhotosType, UserType} from \"../types/types\";\r\nimport {AppStateType, BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {usersAPI} from \"../api/users-api\";\r\nimport {APIResponseType} from \"../api/api\";\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 20,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number> //array of users ids\r\n};\r\n\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialState => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            }\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            }\r\n        case 'SN/USERS/SET_USERS':\r\n            return {...state, users: action.users}\r\n\r\n        case 'SN/USERS/SET_CURRENT_PAGE':\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT':\r\n            return {...state, totalUsersCount: action.count}\r\n\r\n        case 'SN/USERS/TOGGLE_IS_FETCHING':\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({\r\n        type: 'SN/USERS/SET_CURRENT_PAGE',\r\n        currentPage\r\n    } as const),\r\n    setUsersTotalCount: (totalUsersCount: number) => ({\r\n        type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\r\n        count: totalUsersCount\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FETCHING',\r\n        isFetching\r\n    } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userId\r\n    } as const)\r\n}\r\n\r\n\r\nexport const requestUsers = (page: number, pageSize: number):\r\n    ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setCurrentPage(page));\r\n        dispatch(actions.toggleIsFetching(true));\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize);\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setUsersTotalCount(data.totalCount));\r\n        dispatch(actions.toggleIsFetching(false));\r\n    }\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>,\r\n                                   userId: number,\r\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                   actionCreator: (userId: number)\r\n                                       => ActionsTypes) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n\r\n    if (response.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess);\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess);\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\nexport type InitialState = typeof initialState;\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n","import React, {useState} from 'react'\r\nimport s from './Paginator.module.css'\r\nimport cn from 'classnames'\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage?: number\r\n    onPageChanged?: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nconst Paginator: React.FC<PropsType> = ({\r\n                                        totalItemsCount,\r\n                                        pageSize,\r\n                                        currentPage = 1,\r\n                                        onPageChanged = x => x,\r\n                                        portionSize = 10\r\n                                    }) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return <div className={s.paginatorsRow}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber - 1)\r\n        }}>Prev</button>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span key={p} className={cn({\r\n                    [s.selectedPage]: currentPage === p\r\n                }, s.pageNumber)}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p)\r\n                             }}>{p}</span>\r\n\r\n            })}\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n        }}>Next</button>}\r\n    </div>\r\n\r\n}\r\nexport default Paginator;","import React from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nlet User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n    return (\r\n        <div>\r\n            <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + user.id}>\r\n                            <img className={s.photoUser} src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                                 alt=\"\"/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed\r\n                            ? <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                                unfollow(user.id);\r\n                            }}>\r\n                                Unfollow\r\n                            </button>\r\n\r\n                            : <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                                follow(user.id);\r\n                            }}>\r\n                                Follow\r\n                            </button>}\r\n                    </div>\r\n            </span>\r\n            <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"user.location.country\"}</div>\r\n                        <div>{\"user.location.city\"}</div>\r\n                    </span>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\nexport default User","import React from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nlet Users: React.FC<PropsType> = ({currentPage, onPageChanged, totalUsersCount, pageSize, users, ...props}) => {\r\n\r\n    return <div className={s.users}>\r\n        <div className={s.paginatorUsers}>\r\n            <Paginator currentPage={currentPage}\r\n                       onPageChanged={onPageChanged}\r\n                       totalItemsCount={totalUsersCount}\r\n                       pageSize={pageSize}\r\n            /></div>\r\n        <div>\r\n            {\r\n                users.map(u => <User key={u.id}\r\n                                     user={u}\r\n                                     followingInProgress={props.followingInProgress}\r\n                                     unfollow={props.unfollow}\r\n                                     follow={props.follow}\r\n                />)\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\nexport default Users;","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsersSelector = (state: AppStateType) => {\r\n    return getUsers(state).filter(u => true);\r\n}\r\n\r\nexport const getUsersSuperSelector = createSelector(getUsers, (users) => {\r\n    return users.filter(u => true)\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}","import {connect} from \"react-redux\";\r\nimport {\r\n    follow, requestUsers,\r\n    unfollow\r\n} from \"../../redux/users-reducer\";\r\nimport React from \"react\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount, getUsersSuperSelector\r\n} from \"../../redux/users-selectors\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {AppStateType} from \"../../redux/redux-store\"\r\n\r\ntype MapStatePropsType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    isFetching: boolean\r\n    totalUsersCount: number\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\ntype OwnPropsType = {\r\n    pageTitle: string\r\n}\r\n\r\ntype PropsType = OwnPropsType & MapDispatchPropsType & MapStatePropsType\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        const {currentPage,pageSize} = this.props;\r\n        this.props.getUsers(currentPage, pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize} = this.props\r\n        this.props.getUsers(pageNumber, pageSize);\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            <h2>{this.props.pageTitle}</h2>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                users={this.props.users}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                followingInProgress={this.props.followingInProgress}\r\n\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsersSuperSelector(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    // withAuthRedirect,\r\n    //<TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        getUsers: requestUsers\r\n    })\r\n)(UsersContainer)","import React from \"react\";\r\nimport s from \"./Header.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type MapPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\nexport type DispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    return (\r\n        <header className={s.app_header}>\r\n            <img\r\n                src=\"https://github.com/PirialMersus/frontend-js/blob/master/menu/img/logo.png?raw=true\"\r\n                alt=\"logo\"\r\n            />\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth ? <div className={s.loginBlock_accPlusLogout}><p>{props.login}</p>\r\n                    <button onClick={props.logout}>Log out</button>\r\n                </div> : <NavLink to={'/login'}>Login</NavLink>}\r\n\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\nexport default Header;\r\n","import {instance, APIResponseType, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance\r\n            .get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance\r\n            .post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>>('auth/login', {email, password, rememberMe, captcha})\r\n            .then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance\r\n            .delete('auth/login');\r\n    }\r\n\r\n}","import {instance} from \"./api\";\r\n\r\ntype GetCaptchaUrlResonceType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance\r\n            .get<GetCaptchaUrlResonceType>('security/get-captcha-url')\r\n            .then(res => res.data)\r\n    }\r\n}","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../api/api\"\r\nimport {FormAction, stopSubmit} from \"redux-form\"\r\nimport {Action, Dispatch} from \"redux\"\r\nimport {ThunkAction} from \"redux-thunk\"\r\nimport {AppStateType, BaseThunkType, InferActionsTypes} from \"./redux-store\"\r\nimport {authAPI} from \"../api/auth-api\"\r\nimport {securityAPI} from \"../api/security-api\"\r\n\r\nconst initialState = {\r\n    userId: null as null | number,\r\n    email: null as null | string,\r\n    login: null as null | string,\r\n    isAuth: false,\r\n    captchaUrl: null as null | string\r\n}\r\n\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/auth/SET_USER_DATA\":\r\n        case \"SN/auth/GET_CAPTCHA_URL_SUCCESS\":\r\n\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: \"SN/auth/SET_USER_DATA\", payload: {userId, email, login, isAuth}\r\n    } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: \"SN/auth/GET_CAPTCHA_URL_SUCCESS\",\r\n        payload: {captchaUrl}\r\n    }as const),\r\n}\r\n\r\n\r\nexport const setMyProfileData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me();\r\n\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        let {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(setMyProfileData());\r\n    } else {\r\n        if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n        const message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch: any) => {\r\n    let response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch: any) => {\r\n    const data = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = data.url\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport default authReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType= BaseThunkType<ActionsType | FormAction>\r\n\r\n","import React from \"react\";\r\n\r\nimport Header, {MapPropsType, DispatchPropsType} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nclass HeaderContainer extends React.Component<MapPropsType & DispatchPropsType> {\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n})\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, {}, AppStateType>(\r\n    mapStateToProps,\r\n    {logout})(HeaderContainer)","import React from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {createField, GetStringKeyS, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport s from \"./../common/FormsControls/FormsControls.module.css\"\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> =\r\n    ({handleSubmit, error, captchaUrl}) => {\r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n\r\n                {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], Input)}\r\n                {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n                {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n\r\n                {captchaUrl && <img alt={\"\"} src={captchaUrl}/>}\r\n                {captchaUrl && createField<LoginFormValuesTypeKeys>(\"Captcha text\", \"captcha\", [required], Input, {})\r\n                }\r\n                {/*{captchaUrl && <Field placeholder={\"Captcha text\"}*/}\r\n                {/*                      name={\"captcha\"}*/}\r\n                {/*                      component={Input}*/}\r\n                {/*/>}*/}\r\n\r\n\r\n                {error && <div className={s.formSummaryError}>\r\n                    {error}\r\n                </div>}\r\n                <div>\r\n                    <button>Login</button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);\r\n\r\ntype MapStatePropsType = {\r\n    captchaUrl: string | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: any, captcha: string) => void\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginFormValuesTypeKeys = GetStringKeyS<LoginFormValuesType>\r\n\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect(mapStateToProps, {login})(Login);","import { Dispatch } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport {setMyProfileData} from \"./auth-reducer\";\r\nimport {AppStateType, InferActionsTypes} from \"./redux-store\";\r\n\r\nconst INITIALIZED_SUCCESS = \"SN/APP/INITIALIZED_SUCCESS\";\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType  => {\r\n    switch (action.type) {\r\n        case \"SN/APP/INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: \"SN/APP/INITIALIZED_SUCCESS\",} as const),\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(setMyProfileData());\r\n    promise\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        })\r\n}\r\n\r\nexport default appReducer;","type FriendType = {\r\n    id: number\r\n    name: string\r\n    iconAddress:string\r\n    isFriend: boolean\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    friends: [\r\n        {\r\n            id: 1,\r\n            name: \"Andrey\",\r\n            iconAddress:\r\n                \"https://vashsport.com/wp-content/uploads/motivaciya-v-sporte-640x440.jpg\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Gena\",\r\n            iconAddress:\r\n                \"https://static10.tgstat.ru/channels/_0/b5/b5bcf9a66a2fd7998922d87c55acf2f3.jpg\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Anatolii\",\r\n            iconAddress:\r\n                \"https://miro.medium.com/max/2560/0*-JLWzLp-DtyCfIo_.jpg\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Kirill\",\r\n            iconAddress:\r\n                \"https://i.pinimg.com/originals/73/cb/81/73cb8185bbc42d96b2799eb30389f176.jpg\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Alexandr emelianenko\",\r\n            iconAddress:\r\n                \"https://m.allboxing.ru/sites/default/files/styles/large/public/052_fedor_emelianenko_x_rampage_jackson.0_0.jpg?itok=lkCYQxio\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 6,\r\n            name: \"Andrey\",\r\n            iconAddress:\r\n                \"https://vashsport.com/wp-content/uploads/motivaciya-v-sporte-640x440.jpg\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 7,\r\n            name: \"Gena\",\r\n            iconAddress:\r\n                \"https://static10.tgstat.ru/channels/_0/b5/b5bcf9a66a2fd7998922d87c55acf2f3.jpg\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 8,\r\n            name: \"Anatolii\",\r\n            iconAddress:\r\n                \"https://miro.medium.com/max/2560/0*-JLWzLp-DtyCfIo_.jpg\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 9,\r\n            name: \"Kirill\",\r\n            iconAddress:\r\n                \"https://i.pinimg.com/originals/73/cb/81/73cb8185bbc42d96b2799eb30389f176.jpg\",\r\n            isFriend: true,\r\n        },\r\n    ]  as Array<FriendType>,\r\n}\r\n\r\n\r\nconst sidebarReducer = (state = initialState, action: any): InitialStateType => {\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {applyMiddleware, combineReducers, createStore, compose, Action} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\"\r\nimport appReducer from \"./app-reducer\";\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n })\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store\r\n\r\n","import React from \"react\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n            <WrappedComponent {...props} />\r\n        </React.Suspense>\r\n    }\r\n}\r\n","/* eslint-disable jsx-a11y/alt-text */\nimport React from \"react\";\n// import \"antd/dist/antd.css\";\n// import { StepForwardOutlined } from '@ant-design/icons';\n// import { Button } from 'antd';\n\nimport \"./App.css\";\n\nimport {HashRouter, Route, Switch, Redirect} from \"react-router-dom\";\nimport Settings from \"./components/Settings/Settings\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport NavbarContainer from \"./components/Navbar/NavbarContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport LoginPage from \"./components/Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport store, {AppStateType} from \"./redux/redux-store\";\nimport {withSuspense} from \"./components/hoc/withSuspense\";\n\n\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"));\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    initializeApp: () => void\n}\n\nconst SuspendedDialogs = withSuspense(DialogsContainer);\nconst SuspendedProfile = withSuspense(ProfileContainer);\n\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\n\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert(e.reason.message);\n    }\n\n    componentDidMount() {\n\n        this.props.initializeApp();\n        window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <HashRouter>\n                <div className=\"app-wrapper\">\n                    <HeaderContainer/>\n                    <NavbarContainer/>\n                    <div className=\"app-wrapper-content\">\n                        <Switch>\n                            <Route\n                                exact path=\"/\"\n                                render={() => <Redirect to={\"/profile\"}/>}\n                            />\n                            <Route\n                                path=\"/profile/:userId?\"\n                                render={() => <SuspendedProfile />}\n                            />\n                            <Route\n                                path=\"/dialogs\"\n                                render={() => <SuspendedDialogs />}\n                            />\n                            <Route\n                                path=\"/users\"\n                                render={() => (\n                                    <UsersContainer pageTitle={\"Samurai\"}/>\n                                )}\n                            />\n                            <Route\n                                path=\"/login\"\n                                render={() => (\n                                    <LoginPage/>\n                                )}\n                            />\n                            <Route path=\"/settings\" render={() => <Settings/>}/>\n                            <Route path=\"/news\" render={() => <News/>}/>\n                            <Route path=\"/music\" render={() =>\n                                <div>Music</div>\n                                // <Music/>}\n                            }/>\n                            <Route path=\"*\" render={() => <div>404 NOT FOUND\n                                {/*<Button>Ok</Button>*/}\n                                {/*<StepForwardOutlined />*/}\n                                </div>}/>\n                        </Switch>\n                    </div>\n                </div>\n            </HashRouter>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n})\n\nconst AppContainer = connect(mapStateToProps, {initializeApp})(App);\n\nexport const SamuraiJsApp: React.FC = () => {\n    return <Provider store={store}>\n        <AppContainer/>\n    </Provider>\n}\n\n","import \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {SamuraiJsApp} from \"./App\";\n\n\nReactDOM.render(\n    <SamuraiJsApp />,\n    document.getElementById(\"root\")\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import preloader from \"../../../assets/images/loading.svg\";\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n}\r\n\r\n\r\nlet Preloader: React.FC = () => {\r\n    return <img alt={\"\"} src={preloader}/>\r\n}\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1SDyZ\",\"error\":\"FormsControls_error__cTaDO\",\"formSummaryError\":\"FormsControls_formSummaryError__1pKVV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__2x1XG\",\"photoUser\":\"Users_photoUser__2oo1c\",\"pageNumbers\":\"Users_pageNumbers__1JgmY\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value: string): string | undefined => {\r\n    if (value) {\r\n        return undefined;\r\n    }\r\n    return 'Field is required';\r\n\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value && value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`;\r\n    }\r\n    return undefined;\r\n}\r\nexport const maxLength10 = (value: string) => {\r\n    if (value.length > 10) {\r\n        return `Max length is 10 symbols`;\r\n    }\r\n    return undefined;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend\":\"FriendsItem_friend__1UraJ\",\"activeLink\":\"FriendsItem_activeLink__1DeBC\",\"friendName\":\"FriendsItem_friendName__11QHv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__2wqhL\",\"paginatorsRow\":\"Paginator_paginatorsRow__eZ5tb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app_header\":\"Header_app_header__HNDjg\",\"loginBlock\":\"Header_loginBlock__3rqTz\",\"loginBlock_accPlusLogout\":\"Header_loginBlock_accPlusLogout__1B2Gw\"};","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getUserProfile(userId: number) {\r\n        return instance\r\n            .get<ProfileType>(`profile/` + userId)\r\n            .then(res => res.data);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance\r\n            .get<string>('profile/status/' + userId)\r\n            .then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance\r\n            .put<APIResponseType>('profile/status', {status: status})\r\n            .then(res => res.data)\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData;\r\n        formData.append(\"image\", photoFile);\r\n        return instance\r\n            .put<APIResponseType<SavePhotoResponseDataType>>('profile/photo', formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            })\r\n            .then(res => res.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance\r\n            .put<APIResponseType>('profile', profile)\r\n            .then(res => res.data)\r\n    }\r\n}","import {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType, BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {usersAPI} from \"../api/users-api\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {id: 1, message: \"It's my first post\", likesCount: 15},\r\n        {id: 2, message: \"Hello, how are you?\", likesCount: 45},\r\n        {id: 3, message: \"Hello, mersus?\", likesCount: 48},\r\n        {id: 4, message: \"Hello, pirial?\", likesCount: 40},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\",\r\n\r\n}\r\n\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/PROFILE/ADD-POST\": {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.postText,\r\n                likesCount: 0,\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            };\r\n        }\r\n        case \"SN/PROFILE/SET_USER_PROFILE\": {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        }\r\n        case \"SN/PROFILE/SET_STATUS\": {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        }\r\n        case \"SN/PROFILE/DELETE_POST\": {\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.postId)}\r\n        }\r\n        case \"SN/PROFILE/SAVE_PHOTO_SUCCESS\": {\r\n            return {...state, profile: {...state.profile, photos: action.photos}as ProfileType}\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (postText: string) => ({type: \"SN/PROFILE/ADD-POST\", postText} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: \"SN/PROFILE/SET_USER_PROFILE\", profile} as const),\r\n    setStatus: (status: string) => ({type: \"SN/PROFILE/SET_STATUS\", status} as const),\r\n    deletePost: (postId: number) => ({type: \"SN/PROFILE/DELETE_POST\", postId} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: \"SN/PROFILE/SAVE_PHOTO_SUCCESS\", photos} as const)\r\n}\r\n\r\n\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionsType>\r\n// type ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n\r\nexport const getUserInformation = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getUserProfile(userId);\r\n    dispatch(actions.setUserProfile(data));\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getStatus(userId)\r\n    dispatch(actions.setStatus(data));\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.updateStatus(status)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.setStatus(status));\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.savePhoto(file)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId;\r\n    const data = await profileAPI.saveProfile(profile);\r\n\r\n    if (data.resultCode === 0) {\r\n        if (userId !== null){\r\n            dispatch(getUserInformation(userId))\r\n        } else {\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}));\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n}\r\n\r\nexport default profileReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>"],"sourceRoot":""}