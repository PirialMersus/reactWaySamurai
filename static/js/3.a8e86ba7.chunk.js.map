{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Profile.module.css","assets/images/arni.png","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","createField","Input","type","TextArea","Object","keys","contacts","map","key","className","s","contact","style","formSummaryError","ProfileData","isOwner","goToEditMode","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","socialNetworks","contactTitle","contactValue","onClick","Contact","href","ProfileInfo","savePhoto","saveProfile","Preloader","avaPlusDescription","photos","large","userPhoto","alt","src","arnold","target","files","length","initialValues","formData","then","Post","item","message","d18","likesCount","required","MyPostsMemorised","React","memo","postsElement","posts","p","Math","random","myPosts","AddPostForm","addPost","newPostText","MyPostsContainer","connect","state","profilePage","actions","addPostActionCreator","MyPosts","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserInformation","getStatus","console","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.a8e86ba7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"avaPlusDescription\":\"ProfileInfo_avaPlusDescription__3dcfc\",\"userPhoto\":\"ProfileInfo_userPhoto__1CtiL\",\"socialIcons\":\"ProfileInfo_socialIcons__9AfKL\",\"contact\":\"ProfileInfo_contact__1Mq3F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__1Yimg\"};","module.exports = __webpack_public_path__ + \"static/media/arni.59ff89f9.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2ZDdM\",\"d18\":\"Post_d18__cXaRW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__25ieO\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div><b>Status: </b><span onDoubleClick={activateMode}>{props.status || \"--------\"}</span></div>}\r\n\r\n            {editMode && <div>\r\n                <input autoFocus={true}\r\n                       onBlur={deactivateEditMode}\r\n                       onChange={onStatusChange}\r\n                       value={status}/>\r\n            </div>}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n\r\n// Колесо, стойки, подтягивания на турнике, выпрыжки колени к плечам, Лотос, закрытый лотос.","import React from \"react\";\r\nimport {createField, GetStringKeyS, Input, TextArea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport style from \"./../../common/FormsControls/FormsControls.module.css\"\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileTypeKeys = GetStringKeyS<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> =\r\n    ({handleSubmit, profile, error}) => {\r\n\r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <b>Full name: </b>{createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\r\n                </div>\r\n\r\n                <div><b>Looking for a job </b>\r\n                    {createField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n                </div>\r\n\r\n                <div><b>My professional skills: </b>\r\n                    {createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], TextArea, {type: \"checkbox\"})}\r\n                </div>\r\n\r\n                <div>\r\n                    <b>About me: </b>\r\n                    {createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], TextArea, {type: \"checkbox\"})}\r\n\r\n                </div>\r\n\r\n\r\n                <div>\r\n                    <b>Contacts: </b> {Object.keys(profile.contacts).map(key => {\r\n                    return <div key={key} className={s.contact}>\r\n                        <b>{key}: </b>\r\n                        {createField(key, \"contacts.\" + key, [], Input)}\r\n                    </div>\r\n                })}\r\n                </div>\r\n\r\n                <div>\r\n                    <button>Save</button>\r\n                </div>\r\n\r\n                {error && <div className={style.formSummaryError}>\r\n                    {error}\r\n                </div>}\r\n\r\n            </form>\r\n        )\r\n\r\n    }\r\n\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\n// import facebook from \"../../../assets/images/facebook-app-logo.svg\";\r\n// import website from \"../../../assets/images/internet.svg\";\r\n// import vk from \"../../../assets/images/vk.svg\";\r\n// import twitter from \"../../../assets/images/twitter.svg\";\r\n// import instagram from \"../../../assets/images/instagram.svg\";\r\n// import youtube from \"../../../assets/images/youtube.svg\";\r\n// import github from \"../../../assets/images/github.svg\";\r\nimport arnold from \"../../../assets/images/arni.png\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\n// type PropsType = {\r\n//     profile: ProfileType\r\n//\r\n// }\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        //todo: remove then\r\n        saveProfile(formData).then(() => {\r\n            setEditMode(false);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.avaPlusDescription}>\r\n                {profile.photos.large ? <img className={s.userPhoto} alt={\"\"} src={profile.photos.large}/> :\r\n                    <img className={s.userPhoto} src={arnold} alt=\"Arni\"/>}\r\n                {isOwner && <input type={\"file\"} onChange={mainPhotoSelected}/>}\r\n\r\n                {editMode ?\r\n                    <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/> :\r\n                    <ProfileData profile={profile} isOwner={isOwner}\r\n                                 goToEditMode={() => setEditMode(true)}/>}\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <b>Full name: </b><span>{profile.fullName}</span>\r\n            </div>\r\n            <div>\r\n\r\n                <div>\r\n                    <b>About me: </b><span>{profile.aboutMe}</span>\r\n                </div>\r\n                {profile.lookingForAJob &&\r\n                <div><b>Ищу работу: </b> <span>Да</span></div>}\r\n                {profile.lookingForAJobDescription &&\r\n                <div><b>Проф скилы: </b> <span>{profile.lookingForAJobDescription}</span></div>}\r\n                <div className={s.socialNetworks}>\r\n                    <b>Contacts: </b> {Object\r\n                    .keys(profile.contacts)\r\n                    .map(key => {\r\n                        {\r\n                            if (profile.contacts[key as keyof ContactsType]) {\r\n                                return <Contact contactTitle={key} key={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                            }\r\n                        }\r\n                    })}\r\n                </div>\r\n                {isOwner && <div>\r\n                    <button onClick={goToEditMode}>Edit</button>\r\n                </div>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><span>{contactTitle}: </span><a href={contactValue}>{contactValue}</a></div>\r\n}\r\n\r\n\r\nexport default ProfileInfo;\r\n","import React from \"react\";\r\nimport s from \"./Post.module.css\";\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img\r\n        src=\"https://demo.phpgang.com/crop-images/demo_files/pool.jpg\"\r\n        alt=\"\"\r\n      />\r\n      {props.message}\r\n      <div>\r\n        <span className={s.d18}>likes {props.likesCount}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Post;\r\n","import {createField, GetStringKeyS, Input, TextArea} from \"../../common/FormsControls/FormsControls\";\r\nimport React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\n\r\ntype PropsType = {\r\n}\r\n\r\nexport type AddPostValuesType = {\r\n    newPostText: string\r\n}\r\n\r\ntype AddPostValuesTypeKeys = GetStringKeyS<AddPostValuesType>\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddPostValuesType, PropsType> & PropsType> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<AddPostValuesTypeKeys>(\"Your post\", \"newPostText\", [required], Input)}\r\n                {/*<Field component={TextArea}*/}\r\n                {/*       name=\"newPostText\"*/}\r\n                {/*       validate={[required]}*/}\r\n                {/*       placeholder={\"Post message\"}*/}\r\n                {/*/>*/}\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddPostValuesType, PropsType>({form: 'AddNewPostForm'})(AddNewPostForm)\r\n// const AddNewPostFormWrapper = reduxForm({form: 'AddNewPostForm'})(AddNewPostForm);\r\n","import React from \"react\";\r\nimport Post from \"./Post/Post\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport AddPostForm, {AddPostValuesType} from \"../AddPostForm/AddPostForm\";\r\nimport {PostType} from \"../../../types/types\";\r\n\r\nexport type MapPropsType = {\r\n    posts: Array<PostType>\r\n}\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = props => {\r\n    let postsElement = props.posts.map((p) => (\r\n\r\n        <Post key={Math.random()} message={p.message} likesCount={p.likesCount}/>\r\n\r\n    ));\r\n\r\n    const onSubmit = (formData: AddPostValuesType) => {\r\n        props.addPost(formData.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPosts}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <AddPostForm onSubmit={onSubmit}/>\r\n            </div>\r\n            <div className={s.posts}>{postsElement}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst MyPostsMemorised = React.memo(MyPosts)\r\n\r\nexport default MyPostsMemorised\r\n","import {actions} from \"../../../redux/profile-reducer\"\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\"\r\nimport {connect} from \"react-redux\"\r\nimport {AppStateType} from \"../../../redux/redux-store\"\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n    addPost: actions.addPostActionCreator\r\n})(MyPosts)\r\n\r\nexport default MyPostsContainer\r\n","import React from \"react\";\r\nimport s from \"./Profile.module.css\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>)\r\n\r\n\r\n};\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport {getStatus, getUserInformation, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../types/types\";\r\nimport {getIsFetching} from \"../../redux/users-selectors\";\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getUserInformation: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\n// const ProfileContainer1: React.FC<MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>> = (props) => {\r\n//\r\n//\r\n//     const refreshProfile = () => {\r\n//         let userId = props.match.params.userId\r\n//         if (!userId) {\r\n//             userId  = props.authorizedUserId;\r\n//             if (!userId) {\r\n//                 props.history.push(\"/login\")\r\n//             }\r\n//         }\r\n//         if (!userId) {\r\n//             console.error(\"ID should exist in URI params or in state('authorixedUserId')\")\r\n//         } else {\r\n//             props.getUserInformation(userId as number)\r\n//             props.getStatus(userId as number)\r\n//         }\r\n//     }\r\n//     return (\r\n//         <Profile {...props}\r\n//                  isOwner={!props.match.params.userId}\r\n//                  profile={props.profile}\r\n//                  status={props.status}\r\n//                  updateStatus={props.updateStatus}\r\n//                  savePhoto={props.savePhoto}/>\r\n//     );\r\n// }\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        if (!userId) {\r\n            console.error(\"ID should exist in URI params or in state('authorixedUserId')\")\r\n        } else {\r\n            this.props.getUserInformation(userId as number)\r\n            this.props.getStatus(userId as number)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        );\r\n    }\r\n};\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserInformation, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n)(ProfileContainer);\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}