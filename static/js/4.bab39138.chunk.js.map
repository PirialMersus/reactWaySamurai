{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","components/hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Message","props","className","s","dialog","message","DialogItem","path","id","to","activeClassName","activeLink","name","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","createField","required","TextArea","Dialogs","state","dialogsPage","dialogsElements","dialogsData","map","d","key","messagesElements","messages","m","dialogs","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","actions","WrappedComponent","restProps"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,WAAa,8B,8FCY1OC,EANsB,SAACC,GAClC,OACI,yBAAKC,UAAWC,IAAEC,QAASH,EAAMI,U,QCO1BC,EAPyB,SAACL,GACrC,IAAIM,EAAO,YAAcN,EAAMO,GAC/B,OACI,yBAAKN,UAAWC,IAAEC,QAAQ,kBAAC,IAAD,CAASK,GAAIF,EAAMG,gBAAiBP,IAAEQ,YAAaV,EAAMW,Q,0BCFrFC,EAAcC,YAAiB,IAyB/BC,EAAsBC,YAAoC,CAACC,KAAM,wBAA3CD,EAdtB,SAACf,GAEH,OACI,0BAAMiB,SAAUjB,EAAMkB,cAClB,6BACKC,YAA0C,qBAAsB,iBAAkB,CAACC,IAAUR,GAAcS,MAEhH,6BACI,6CAoCDC,EAtBsB,SAACtB,GAClC,IAAIuB,EAAQvB,EAAMwB,YAEdC,EAAkBF,EAAMG,YAAYC,KAAK,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYjB,KAAMiB,EAAEjB,KAAMkB,IAAKD,EAAErB,GAAIA,GAAIqB,EAAErB,QACzFuB,EAAmBP,EAAMQ,SAASJ,KAAK,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAAS5B,QAAS4B,EAAE5B,QAASyB,IAAKG,EAAEzB,QAMpF,OACI,yBAAKN,UAAWC,IAAE+B,SACd,yBAAKhC,UAAWC,IAAEgC,cACbT,GAEL,yBAAKxB,UAAWC,IAAE6B,UACd,6BAAMD,GACN,kBAAChB,EAAD,CAAqBG,SAXb,SAACkB,GACjBnC,EAAMoC,YAAYD,EAAOE,sB,yBC7C7BC,EAA6B,SAACf,GAAD,MAA0B,CACvDgB,OAAQhB,EAAMiB,KAAKD,S,YCORE,sBACXC,aAPkB,SAACnB,GACnB,MAAO,CACHC,YAAaD,EAAMC,eAKhB,eAAsBmB,ODA1B,SAA+BC,GAclC,OAHqCF,YAA4DJ,EAA4B,GAAxFI,EATiC,SAAC1C,GAAW,IACzEuC,EAAwBvC,EAAxBuC,OAAWM,EAD6D,YAChD7C,EADgD,YAG7E,OAAKuC,EAEE,kBAACK,EAAqBC,GAFT,kBAAC,IAAD,CAAUrC,GAAG,gBCN1BiC,CAIbnB","file":"static/js/4.bab39138.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3ktPR\",\"dialogsItems\":\"Dialogs_dialogsItems__3XX3O\",\"dialog\":\"Dialogs_dialog__s-iyi\",\"active\":\"Dialogs_active__17E9q\",\"messages\":\"Dialogs_messages___wEOG\",\"message\":\"Dialogs_message__28lK7\",\"activeLink\":\"Dialogs_activeLink__2dh-9\"};","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.dialog}>{props.message}</div>\r\n    );\r\n};\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={s.dialog}><NavLink to={path} activeClassName={s.activeLink}>{props.name}</NavLink></div>\r\n    );\r\n};\r\n\r\nexport default DialogItem;","// чтобы разделить на 2 файла , использовать видео 11 - react+ TypeScript Путь самур 2.0\r\nimport React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport Message from \"./Message/Message\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, TextArea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\n\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\ntype NewMessageFormVakuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype AddMessagePropsType = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, AddMessagePropsType> & AddMessagePropsType>\r\n    = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormVakuesKeysType>(\"Enter your message\", \"newMessageBody\", [required, maxLength50], TextArea)}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<NewMessageFormValuesType>({form: 'dialogAddMessageForm'})(AddMessageForm);\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogsData.map( d => <DialogItem name={d.name} key={d.id} id={d.id} />  );\r\n    let messagesElements = state.messages.map( m => <Message message={m.message} key={m.id} /> );\r\n\r\n    let addNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    };\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType)\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect, {})\r\n    (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n} ","import {actions} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...actions\r\n    }),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n"],"sourceRoot":""}