{"version":3,"sources":["components/hoc/withAuthRedirect.js","api/api.ts","components/Navbar/Navbar.module.css","redux/dialogs-reducer.ts","assets/images/user.png","assets/images/loading.svg","components/common/FormsControls/FormsControls.tsx","serviceWorker.js","components/Settings/Settings.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Navbar/FriendsItem/FriendsItem.tsx","components/Navbar/Navbar.tsx","components/Navbar/NavbarContainer.tsx","utils/object-helpers.js","redux/users-reducer.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Header/Header.tsx","redux/auth-reducer.ts","components/Header/HeaderContainer.jsx","components/Login/Login.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","components/hoc/withSuspense.js","App.js","index.js","components/common/Preloader/Preloader.js","components/common/FormsControls/FormsControls.module.css","components/Users/Users.module.css","utils/validators/validators.ts","components/Navbar/FriendsItem/FriendsItem.module.css","components/common/Paginator/Paginator.module.css","components/Header/Header.module.css","redux/profile-reducer.ts"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","ResultCodesEnum","ResultCodeForCaptcha","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","responce","data","getUserProfile","userId","console","warn","profileAPI","unfollowUser","delete","followUser","post","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","profile","authAPI","me","res","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaUrl","module","exports","initialState","messages","id","message","dialogsData","name","addMessageActionCreator","newMessageBody","type","dialogsReducer","action","newMessage","FormControl","meta","touched","error","children","hasError","className","styles","formControl","TextArea","input","restProps","Input","createField","placeholder","validators","component","text","validate","Boolean","window","location","hostname","match","Settings","News","Music","group","song","defaultProps","FriendsItem","path","s","friend","activeClassName","activeLink","src","alt","friendName","Navbar","friendsElements","friends","map","d","iconAddress","key","app_nav","navList","item","active","friendsItems","NavbarContainer","sidebar","updateObjectInArray","items","itemId","objPropName","newObjProps","u","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","toggleIsFetching","toggleFollowingProgress","_followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","usersReducer","followed","count","filter","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginatorsRow","onClick","p","cn","selectedPage","pageNumber","e","User","user","unfollow","follow","photoUser","photos","small","userPhoto","disabled","some","Users","paginatorUsers","usersPage","getUsersSuperSelector","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageTitle","Preloader","compose","bind","page","getState","totalCount","Header","app_header","loginBlock","loginBlock_accPlusLogout","SET_USER_DATA","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","setMyProfileData","meData","Success","response","url","authReducer","HeaderContainer","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","required","undefined","formSummaryError","CaptchaIsRequired","length","stopSubmit","_error","initialized","appReducer","isFriend","sidebarReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","withSuspense","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","App","catchAllUnhandledErrors","reason","alert","initializeApp","addEventListener","removeEventListener","exact","render","AppContainer","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","preloader","value","maxLengthCreator","maxLength","posts","likesCount","addPostActionCreator","postText","setStatus","getUserInformation","file","Promise","reject","newPost","postId"],"mappings":"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","file":"static/js/main.161322d0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import axios from \"axios\";\r\nimport {ProfileType} from \"../types/types\";\r\nimport {strict} from \"assert\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"7f79b91b-2e45-4e21-b6d5-aacbccd686ed\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance\r\n            .get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(responce => responce.data);\r\n    },\r\n    getUserProfile(userId: number) {\r\n        console.warn(\"Obsolete method. Please, use profileAPI object\");\r\n        return profileAPI.getUserProfile(userId);\r\n    },\r\n    unfollowUser(userId: number) {\r\n        return instance\r\n            .delete(`follow/` + userId)\r\n    },\r\n    followUser(userId: number) {\r\n        return instance\r\n            .post(`follow/` + userId)\r\n    },\r\n\r\n}\r\nexport const profileAPI = {\r\n    getUserProfile(userId: number) {\r\n        return instance\r\n            .get(`profile/` + userId)\r\n            .then(responce => responce.data);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get('profile/status/' + userId);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put('profile/status', {status: status});\r\n    },\r\n    savePhoto(photoFile: any) {\r\n        const formData = new FormData;\r\n        formData.append(\"image\", photoFile);\r\n        return instance.put('profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put('profile', profile);\r\n    }\r\n}\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\nexport enum ResultCodeForCaptcha {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\ntype MeResponseType = {\r\n    data: {\r\n        id: number\r\n        email: string\r\n        login: string\r\n    }\r\n    resultCode: number\r\n    messages: Array<string>\r\n}\r\ntype LoginResponseType = {\r\n    data: {\r\n        userId: number\r\n    }\r\n    resultCode: ResultCodeForCaptcha | ResultCodesEnum\r\n    messages: Array<string>\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return instance\r\n            .get<MeResponseType>(`auth/me`).then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance\r\n            .post<LoginResponseType>('auth/login', {email, password, rememberMe, captcha})\r\n            .then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance\r\n            .delete('auth/login');\r\n    }\r\n\r\n}\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance\r\n            .get('security/get-captcha-url');\r\n    }\r\n}\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app_nav\":\"Navbar_app_nav__MvB8r\",\"navList\":\"Navbar_navList__t5k0U\",\"item\":\"Navbar_item__3-bYs\",\"activeLink\":\"Navbar_activeLink__3L5WZ\",\"friends\":\"Navbar_friends__zAibx\",\"friendsItems\":\"Navbar_friendsItems__3qudn\"};","import {strict} from \"assert\";\r\n\r\nconst ADD_MESSAGE = \"ADD-MESSAGE\";\r\n\r\ntype DialogType = {\r\n    id: number;\r\n    name: string;\r\n};\r\ntype MessageType = {\r\n    id: number;\r\n    message: string;\r\n};\r\n\r\nconst initialState = {\r\n    messages: [\r\n        {id: 1, message: \"Hello\"},\r\n        {id: 2, message: \"It-Kamasutra\"},\r\n        {id: 3, message: \"Yo\"},\r\n        {id: 4, message: \"sfsdfsdf\"},\r\n        {id: 5, message: \"dddfffffddddd\"},\r\n    ] as Array<MessageType>,\r\n    dialogsData: [\r\n        {id: 1, name: \"Artem\"},\r\n        {id: 2, name: \"Victor\"},\r\n        {id: 3, name: \"Sveta\"},\r\n        {id: 4, name: \"Nikolay\"},\r\n        {id: 5, name: \"Dimich\"},\r\n        {id: 6, name: \"Gregorii\"},\r\n        {id: 7, name: \"Gena\"},\r\n    ] as Array<DialogType>,\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst dialogsReducer = (\r\n    state = initialState,\r\n    action: {\r\n        type: string;\r\n        newMessageBody: string;\r\n    }\r\n): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE: {\r\n            let newMessage = {\r\n                id: 5,\r\n                message: action.newMessageBody,\r\n            };\r\n\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMessage],\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype AddMessageActionCreatorType = {\r\n    type: typeof ADD_MESSAGE;\r\n    newMessageBody: string;\r\n};\r\n\r\nexport const addMessageActionCreator = (\r\n    newMessageBody: string\r\n): AddMessageActionCreatorType => ({type: ADD_MESSAGE, newMessageBody});\r\n\r\nexport default dialogsReducer;\r\n","module.exports = __webpack_public_path__ + \"static/media/user.93a57c9f.png\";","module.exports = __webpack_public_path__ + \"static/media/loading.27fc27b6.svg\";","import React from \"react\"\r\nimport styles from \"./FormsControls.module.css\"\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\"\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\"\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TextArea: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props} > <textarea {...input}{...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props} > <input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\n\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                            name: FormKeysType,\r\n                            validators: Array<FieldValidatorType>,\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            props = {},\r\n                            text = \"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\n// import s from \"./Settings.module.css\";\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            <p>Settings</p>\r\n        </div>\r\n    );\r\n};\r\nexport default Settings;","import React from \"react\";\r\n// import s from \"./News.module.css\";\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            <p>News</p>\r\n        </div>\r\n    );\r\n};\r\nexport default News;","import React from \"react\";\r\n// import s from \"./Music.module.css\";\r\n\r\ntype PropsType = {\r\n    group: string\r\n    song: string\r\n}\r\n\r\nconst Music: React.FC<PropsType> = ({group, song}) => {\r\n    return (\r\n        <div>\r\n            <h3>Music</h3>\r\n            <h5>{group}</h5>\r\n            <p>{song}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nMusic.defaultProps = {\r\n    group: 'Red Hot Chili Papers',\r\n    song: 'Hello world!'\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport s from \"./FriendsItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    id: number\r\n    path: string\r\n    name: string\r\n\r\n}\r\n\r\nconst FriendsItem: React.FC<PropsType> = (props) => {\r\n    let path = \"/friends/\" + props.id;\r\n    return (\r\n        <div className={s.friend}>\r\n            <NavLink to={path} activeClassName={s.activeLink}>\r\n                <img src={props.path} alt=\"\"/>\r\n                <p className={s.friendName}>{props.name}</p>\r\n            </NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FriendsItem\r\n","import React from \"react\";\r\nimport s from \"./Navbar.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport FriendsItem from \"./FriendsItem/FriendsItem\";\r\n\r\n export type FriendType = {\r\n    id: number\r\n    name: string\r\n    iconAddress: string\r\n    isFriend: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    friends: Array<FriendType>\r\n\r\n}\r\n\r\nconst Navbar: React.FC<PropsType> = (props) => {\r\n    let friendsElements = props.friends.map((d) => (\r\n        <FriendsItem name={d.name} id={d.id} path={d.iconAddress} key={d.id}/>\r\n    ));\r\n\r\n    return (\r\n        <nav className={s.app_nav}>\r\n            <ul className={s.navList}>\r\n                <li className={s.item}>\r\n                    <NavLink to=\"/profile\" activeClassName={s.activeLink}>\r\n                        Profile\r\n                    </NavLink>\r\n                </li>\r\n                <li className={`${s.item} ${s.active}`}>\r\n                    <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>\r\n                        Messages\r\n                    </NavLink>\r\n                </li>\r\n                <li className={s.item}>\r\n                    <NavLink to=\"/news\" activeClassName={s.activeLink}>\r\n                        News\r\n                    </NavLink>\r\n                </li>\r\n                <li className={s.item}>\r\n                    <NavLink to=\"/music\" activeClassName={s.activeLink}>\r\n                        Music\r\n                    </NavLink>\r\n                </li>\r\n                <li className={s.item}>\r\n                    <NavLink to=\"/users\" activeClassName={s.activeLink}>\r\n                        Users\r\n                    </NavLink>\r\n                </li>\r\n                <li className={s.item}>\r\n                    <NavLink to=\"/settings\" activeClassName={s.activeLink}>\r\n                        Settings\r\n                    </NavLink>\r\n                </li>\r\n            </ul>\r\n            <div className={s.friends}>\r\n                <h3>Friends</h3>\r\n                <div className={s.friendsItems}>{friendsElements}</div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\nexport default Navbar","import {connect} from \"react-redux\";\r\nimport Navbar, {FriendType} from \"./Navbar\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    friends: FriendType\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        friends: state.sidebar.friends\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = () => {\r\n    return {}\r\n}\r\n\r\nconst NavbarContainer = connect(mapStateToProps, mapDispatchToProps)(Navbar)\r\n\r\nexport default NavbarContainer;\r\n","export const updateObjectInArray = (items, itemId, objPropName, newObjProps) => {\r\n    return items.map(u => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u\r\n    })\r\n}","import {usersAPI} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\nimport {PhotosType, UserType} from \"../types/types\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\";\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 20,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number> //array of users ids\r\n};\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case SET_TOTAL_USERS_COUNT:\r\n            return {...state, totalUsersCount: action.count}\r\n\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionsTypes =\r\n    FollowSuccessActionType\r\n    | UnfollowSuccessActionType\r\n    | SetUsersActionType\r\n    |\r\n    SetCurrentPageActionType\r\n    | SetUsersTotalCountActionType\r\n    | ToggleIsFetchingActionType\r\n    | ToggleFollowingProgressActionType\r\n\r\ntype FollowSuccessActionType = {\r\n    type: typeof FOLLOW\r\n    userId: number\r\n}\r\nexport const followSuccess = (userId: number): FollowSuccessActionType => ({type: FOLLOW, userId});\r\ntype UnfollowSuccessActionType = {\r\n    type: typeof UNFOLLOW\r\n    userId: number\r\n}\r\nexport const unfollowSuccess = (userId: number): UnfollowSuccessActionType => ({type: UNFOLLOW, userId});\r\ntype SetUsersActionType = {\r\n    type: typeof SET_USERS\r\n    users: Array<UserType>\r\n}\r\nexport const setUsers = (users: Array<UserType>): SetUsersActionType => ({type: SET_USERS, users});\r\ntype SetCurrentPageActionType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageActionType => ({\r\n    type: SET_CURRENT_PAGE,\r\n    currentPage\r\n});\r\ntype SetUsersTotalCountActionType = {\r\n    type: typeof SET_TOTAL_USERS_COUNT\r\n    count: number\r\n}\r\nexport const setUsersTotalCount = (totalUsersCount: number): SetUsersTotalCountActionType => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    count: totalUsersCount\r\n});\r\ntype ToggleIsFetchingActionType = {\r\n    type: typeof TOGGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean): ToggleIsFetchingActionType => ({\r\n    type: TOGGLE_IS_FETCHING,\r\n    isFetching\r\n});\r\ntype ToggleFollowingProgressActionType = {\r\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS\r\n    isFetching: boolean\r\n    userId: number\r\n}\r\n\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number): ToggleFollowingProgressActionType => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n});\r\n\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionsTypes>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n\r\nexport const requestUsers = (page: number, pageSize: number):\r\n    ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(setCurrentPage(page));\r\n        dispatch(toggleIsFetching(true));\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize);\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setUsersTotalCount(data.totalCount));\r\n        dispatch(toggleIsFetching(false));\r\n    }\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType, userId: number, apiMethod: any, actionCreator: (userId: number)\r\n    => FollowSuccessActionType | UnfollowSuccessActionType) => {\r\n    dispatch(toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId);\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.followUser.bind(usersAPI), followSuccess);\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollowUser.bind(usersAPI), unfollowSuccess);\r\n    }\r\n}\r\n\r\nexport default usersReducer;","import React, {useState} from 'react'\r\nimport s from './Paginator.module.css'\r\nimport cn from 'classnames'\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nconst Paginator: React.FC<PropsType> = ({\r\n                                        totalItemsCount,\r\n                                        pageSize,\r\n                                        currentPage,\r\n                                        onPageChanged,\r\n                                        portionSize = 10\r\n                                    }) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return <div className={s.paginatorsRow}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber - 1)\r\n        }}>Prev</button>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span key={p} className={cn({\r\n                    [s.selectedPage]: currentPage === p\r\n                }, s.pageNumber)}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p)\r\n                             }}>{p}</span>\r\n\r\n            })}\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n        }}>Next</button>}\r\n    </div>\r\n\r\n}\r\nexport default Paginator;","import React from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nlet User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n    return (\r\n        <div>\r\n            <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + user.id}>\r\n                            <img className={s.photoUser} src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                                 alt=\"\"/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed\r\n                            ? <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                                unfollow(user.id);\r\n                            }}>\r\n                                Unfollow\r\n                            </button>\r\n\r\n                            : <button disabled={followingInProgress.some(id => id === user.id)} onClick={() => {\r\n                                follow(user.id);\r\n                            }}>\r\n                                Follow\r\n                            </button>}\r\n                    </div>\r\n            </span>\r\n            <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"user.location.country\"}</div>\r\n                        <div>{\"user.location.city\"}</div>\r\n                    </span>\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\nexport default User","import React from \"react\";\r\nimport s from \"./Users.module.css\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nlet Users: React.FC<PropsType> = ({currentPage, onPageChanged, totalUsersCount, pageSize, users, ...props}) => {\r\n\r\n    return <div className={s.users}>\r\n        <div className={s.paginatorUsers}>\r\n            <Paginator currentPage={currentPage}\r\n                       onPageChanged={onPageChanged}\r\n                       totalItemsCount={totalUsersCount}\r\n                       pageSize={pageSize}\r\n            /></div>\r\n        <div>\r\n            {\r\n                users.map(u => <User key={u.id}\r\n                                     user={u}\r\n                                     followingInProgress={props.followingInProgress}\r\n                                     unfollow={props.unfollow}\r\n                                     follow={props.follow}\r\n                />)\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\nexport default Users;","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsersSelector = (state: AppStateType) => {\r\n    return getUsers(state).filter(u => true);\r\n}\r\n\r\nexport const getUsersSuperSelector = createSelector(getUsers, (users) => {\r\n    return users.filter(u => true)\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}","import {connect} from \"react-redux\";\r\nimport {\r\n    follow, requestUsers,\r\n    unfollow\r\n} from \"../../redux/users-reducer\";\r\nimport React from \"react\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount, getUsersSuperSelector\r\n} from \"../../redux/users-selectors\";\r\nimport {UserType} from \"../../types/types\";\r\nimport {AppStateType} from \"../../redux/redux-store\"\r\n\r\ntype MapStatePropsType = {\r\n    currentPage: number\r\n    pageSize: number\r\n    isFetching: boolean\r\n    totalUsersCount: number\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\ntype OwnPropsType = {\r\n    pageTitle: string\r\n}\r\n\r\ntype PropsType = OwnPropsType & MapDispatchPropsType & MapStatePropsType\r\n\r\nclass UsersContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        const {currentPage,pageSize} = this.props;\r\n        this.props.getUsers(currentPage, pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        const {pageSize} = this.props\r\n        this.props.getUsers(pageNumber, pageSize);\r\n    }\r\n\r\n    render() {\r\n\r\n        return <>\r\n            <h2>{this.props.pageTitle}</h2>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users\r\n                totalUsersCount={this.props.totalUsersCount}\r\n                pageSize={this.props.pageSize}\r\n                currentPage={this.props.currentPage}\r\n                onPageChanged={this.onPageChanged}\r\n                users={this.props.users}\r\n                follow={this.props.follow}\r\n                unfollow={this.props.unfollow}\r\n                followingInProgress={this.props.followingInProgress}\r\n\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsersSuperSelector(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    //<TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, {\r\n        follow,\r\n        unfollow,\r\n        getUsers: requestUsers\r\n    })\r\n)(UsersContainer)","import React from \"react\";\r\nimport s from \"./Header.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    login: string\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <header className={s.app_header}>\r\n            <img\r\n                src=\"https://github.com/PirialMersus/frontend-js/blob/master/menu/img/logo.png?raw=true\"\r\n                alt=\"logo\"\r\n            />\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth ? <div className={s.loginBlock_accPlusLogout}><p>{props.login}</p>\r\n                    <button onClick={props.logout}>Log out</button>\r\n                </div> : <NavLink to={'/login'}>Login</NavLink>}\r\n\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\nexport default Header;\r\n","import {authAPI, ResultCodeForCaptcha, ResultCodesEnum, securityAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {Dispatch} from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst SET_USER_DATA = \"samurai-network/auth/SET_USER_DATA\";\r\nconst GET_CAPTCHA_URL_SUCCESS = \"samurai-network/auth/GET_CAPTCHA_URL_SUCCESS\";\r\n\r\nconst initialState = {\r\n    userId: null as null | number,\r\n    email: null as null | string,\r\n    login: null as null | string,\r\n    isAuth: false,\r\n    captchaUrl: null as null | string\r\n};\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL_SUCCESS:\r\n\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype SetAuthUserDataActionPayloadType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\ntype ActionsTypes = SetAuthUserDataActionType | GetCaptchaUrlSuccessType\r\ntype DispatchType = Dispatch<ActionsTypes>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n\r\ntype SetAuthUserDataActionType = {\r\n    type: typeof SET_USER_DATA\r\n    payload: SetAuthUserDataActionPayloadType\r\n}\r\n\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean): SetAuthUserDataActionType => ({\r\n    type: SET_USER_DATA,\r\n    payload: {userId, email, login, isAuth}\r\n});\r\n\r\ntype GetCaptchaUrlSuccessType = {\r\n    type: typeof GET_CAPTCHA_URL_SUCCESS,\r\n    payload: {captchaUrl: string}\r\n}\r\n\r\n\r\n\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string): GetCaptchaUrlSuccessType => ({\r\n    type: GET_CAPTCHA_URL_SUCCESS,\r\n    payload: {captchaUrl}\r\n});\r\n\r\nexport const setMyProfileData = () => async (dispatch: any) => {\r\n    let meData = await authAPI.me();\r\n\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        let {id, login, email} = meData.data;\r\n        dispatch(setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: any, captcha: string) => async (dispatch: any) => {\r\n\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(setMyProfileData());\r\n    } else {\r\n        if (data.resultCode === ResultCodeForCaptcha.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n        const message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n}\r\n\r\nexport const logout = () => async (dispatch: DispatchType) => {\r\n    let response = await authAPI.logout();\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = () => async (dispatch: DispatchType) => {\r\n    const response = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = response.data.url;\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl));\r\n}\r\n\r\nexport default authReducer;","import React from \"react\";\r\n\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\nclass HeaderContainer extends React.Component {\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);\r\n","import React from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {createField, Input } from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport s from \"./../common/FormsControls/FormsControls.module.css\"\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> =\r\n    ({handleSubmit, error, captchaUrl}) => {\r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n\r\n                {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], Input)}\r\n                {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n                {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember me\")}\r\n\r\n                {captchaUrl && <img alt={\"\"} src={captchaUrl}/>}\r\n                {captchaUrl && createField<LoginFormValuesTypeKeys>(\"Captcha text\", \"captcha\", [required], Input, {})\r\n                }\r\n                {/*{captchaUrl && <Field placeholder={\"Captcha text\"}*/}\r\n                {/*                      name={\"captcha\"}*/}\r\n                {/*                      component={Input}*/}\r\n                {/*/>}*/}\r\n\r\n\r\n                {error && <div className={s.formSummaryError}>\r\n                    {error}\r\n                </div>}\r\n                <div>\r\n                    <button>Login</button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm);\r\n\r\ntype MapStatePropsType = {\r\n    captchaUrl: string | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: any, captcha: string) => void\r\n}\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginFormValuesTypeKeys = Extract<keyof LoginFormValuesType, string>\r\n\r\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = (props) => {\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n})\r\nexport default connect(mapStateToProps, {login})(Login);","import { Dispatch } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport {setMyProfileData} from \"./auth-reducer\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst INITIALIZED_SUCCESS = \"INITIALIZED_SUCCESS\";\r\n\r\nexport type InitialStateType = {\r\n    initialized: boolean\r\n};\r\n\r\nlet initialState: InitialStateType = {\r\n    initialized: false,\r\n};\r\n\r\nconst appReducer = (state = initialState, action: ActionType): InitialStateType  => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionType = InitializedSuccessActionType\r\ntype DispatchType = Dispatch<ActionType>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionType>\r\n\r\ntype InitializedSuccessActionType = {\r\n    type: typeof INITIALIZED_SUCCESS\r\n}\r\n\r\nexport const initializedSuccess = (): InitializedSuccessActionType => ({\r\n    type: INITIALIZED_SUCCESS,\r\n});\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(setMyProfileData());\r\n    promise\r\n        .then(() => {\r\n            dispatch(initializedSuccess());\r\n        })\r\n}\r\n\r\nexport default appReducer;","type FriendType = {\r\n    id: number\r\n    name: string\r\n    iconAddress:string\r\n    isFriend: boolean\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nlet initialState = {\r\n    friends: [\r\n        {\r\n            id: 1,\r\n            name: \"Andrey\",\r\n            iconAddress:\r\n                \"https://vashsport.com/wp-content/uploads/motivaciya-v-sporte-640x440.jpg\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 2,\r\n            name: \"Gena\",\r\n            iconAddress:\r\n                \"https://static10.tgstat.ru/channels/_0/b5/b5bcf9a66a2fd7998922d87c55acf2f3.jpg\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 3,\r\n            name: \"Anatolii\",\r\n            iconAddress:\r\n                \"https://miro.medium.com/max/2560/0*-JLWzLp-DtyCfIo_.jpg\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 4,\r\n            name: \"Kirill\",\r\n            iconAddress:\r\n                \"https://i.pinimg.com/originals/73/cb/81/73cb8185bbc42d96b2799eb30389f176.jpg\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 5,\r\n            name: \"Alexandr emelianenko\",\r\n            iconAddress:\r\n                \"https://m.allboxing.ru/sites/default/files/styles/large/public/052_fedor_emelianenko_x_rampage_jackson.0_0.jpg?itok=lkCYQxio\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 6,\r\n            name: \"Andrey\",\r\n            iconAddress:\r\n                \"https://vashsport.com/wp-content/uploads/motivaciya-v-sporte-640x440.jpg\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 7,\r\n            name: \"Gena\",\r\n            iconAddress:\r\n                \"https://static10.tgstat.ru/channels/_0/b5/b5bcf9a66a2fd7998922d87c55acf2f3.jpg\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 8,\r\n            name: \"Anatolii\",\r\n            iconAddress:\r\n                \"https://miro.medium.com/max/2560/0*-JLWzLp-DtyCfIo_.jpg\",\r\n            isFriend: true,\r\n        },\r\n        {\r\n            id: 9,\r\n            name: \"Kirill\",\r\n            iconAddress:\r\n                \"https://i.pinimg.com/originals/73/cb/81/73cb8185bbc42d96b2799eb30389f176.jpg\",\r\n            isFriend: true,\r\n        },\r\n    ]  as Array<FriendType>,\r\n}\r\n\r\n\r\nconst sidebarReducer = (state = initialState, action: any): InitialStateType => {\r\n\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import {applyMiddleware, combineReducers, createStore, compose } from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\"\r\nimport appReducer from \"./app-reducer\";\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n })\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store\r\n\r\n","import React from \"react\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\n\r\nexport const withSuspense = (Component) => {\r\n\r\n    return (props) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n            <Component {...props} />\r\n        </React.Suspense>\r\n    }\r\n}\r\n","/* eslint-disable jsx-a11y/alt-text */\nimport React from \"react\";\n// import \"antd/dist/antd.css\";\n// import { StepForwardOutlined } from '@ant-design/icons';\n// import { Button } from 'antd';\n\nimport \"./App.css\";\n\nimport {HashRouter, Route, Switch, Redirect} from \"react-router-dom\";\nimport Settings from \"./components/Settings/Settings\";\nimport News from \"./components/News/News\";\nimport Music from \"./components/Music/Music\";\nimport NavbarContainer from \"./components/Navbar/NavbarContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport LoginPage from \"./components/Login/Login\";\nimport {connect, Provider} from \"react-redux\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport store from \"./redux/redux-store\";\nimport {withSuspense} from \"./components/hoc/withSuspense\";\n\n\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"));\n\nclass App extends React.Component {\n\n    catchAllUnhandledErrors = (reason) => {\n        // debugger\n        alert(reason.reason.message);\n    }\n\n    componentDidMount() {\n\n        this.props.initializeApp();\n        window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <HashRouter>\n                <div className=\"app-wrapper\">\n                    <HeaderContainer/>\n                    <NavbarContainer/>\n                    <div className=\"app-wrapper-content\">\n                        <Switch>\n                            <Route\n                                exact path=\"/\"\n                                render={() => <Redirect to={\"/profile\"}/>}\n                            />\n                            <Route\n                                path=\"/profile/:userId?\"\n                                render={withSuspense(ProfileContainer)}\n                            />\n                            <Route\n                                path=\"/dialogs\"\n                                render={withSuspense(DialogsContainer)}\n                            />\n                            <Route\n                                path=\"/users\"\n                                render={() => (\n                                    <UsersContainer pageTitle={\"Samurai\"}/>\n                                )}\n                            />\n                            <Route\n                                path=\"/login\"\n                                render={() => (\n                                    <LoginPage/>\n                                )}\n                            />\n                            <Route path=\"/settings\" render={() => <Settings/>}/>\n                            <Route path=\"/news\" render={() => <News/>}/>\n                            <Route path=\"/music\" render={() => <Music/>}/>\n                            <Route path=\"*\" render={() => <div>404 NOT FOUND\n                                {/*<Button>Ok</Button>*/}\n                                {/*<StepForwardOutlined />*/}\n                                </div>}/>\n                        </Switch>\n                    </div>\n                </div>\n            </HashRouter>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    initialized: state.app.initialized\n})\n\nconst AppContainer = connect(mapStateToProps, {initializeApp})(App);\n\nexport const SamuraiJsApp = () => {\n    return <Provider store={store}>\n        <AppContainer/>\n    </Provider>\n}\n\n","import \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {SamuraiJsApp} from \"./App\";\n\n\nReactDOM.render(\n    <SamuraiJsApp />,\n    document.getElementById(\"root\")\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import preloader from \"../../../assets/images/loading.svg\";\r\nimport React from \"react\";\r\n\r\nlet Preloader = (props) => {\r\n    return <img alt={\"\"} src={preloader}/>\r\n}\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1SDyZ\",\"error\":\"FormsControls_error__cTaDO\",\"formSummaryError\":\"FormsControls_formSummaryError__1pKVV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__2x1XG\",\"photoUser\":\"Users_photoUser__2oo1c\",\"pageNumbers\":\"Users_pageNumbers__1JgmY\"};","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value: string): string | undefined => {\r\n    if (value) {\r\n        return undefined;\r\n    }\r\n    return 'Field is required';\r\n\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value && value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`;\r\n    }\r\n    return undefined;\r\n}\r\nexport const maxLength10 = (value: string) => {\r\n    if (value.length > 10) {\r\n        return `Max length is 10 symbols`;\r\n    }\r\n    return undefined;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend\":\"FriendsItem_friend__1UraJ\",\"activeLink\":\"FriendsItem_activeLink__1DeBC\",\"friendName\":\"FriendsItem_friendName__11QHv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__2wqhL\",\"paginatorsRow\":\"Paginator_paginatorsRow__eZ5tb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app_header\":\"Header_app_header__HNDjg\",\"loginBlock\":\"Header_loginBlock__3rqTz\",\"loginBlock_accPlusLogout\":\"Header_loginBlock_accPlusLogout__1B2Gw\"};","import {profileAPI, usersAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {Dispatch} from \"redux\";\r\nimport { AppStateType } from \"./redux-store\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\r\nconst SET_STATUS = \"SET_STATUS\";\r\nconst DELETE_POST = \"DELETE_POST\";\r\nconst SAVE_PHOTO_SUCCESS = \"SAVE_PHOTO_SUCCESS\";\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {id: 1, message: \"It's my first post\", likesCount: 15},\r\n        {id: 2, message: \"Hello, how are you?\", likesCount: 45},\r\n        {id: 3, message: \"Hello, mersus?\", likesCount: 48},\r\n        {id: 4, message: \"Hello, pirial?\", likesCount: 40},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: \"\"\r\n\r\n}\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst profileReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.postText,\r\n                likesCount: 0,\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost]\r\n            };\r\n        }\r\n        case SET_USER_PROFILE: {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        }\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        }\r\n        case DELETE_POST: {\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.postId)}\r\n        }\r\n        case SAVE_PHOTO_SUCCESS: {\r\n            return {...state, profile: {...state.profile, photos: action.photos}as ProfileType}\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsTypes =\r\n    AddPostActionCreatorType | SetUserProfileActionType | SetStatusActionType |\r\n    DeletePostActionType | SavePhotoSuccessActionType\r\n\r\n\r\ntype AddPostActionCreatorType = {\r\n    type: typeof ADD_POST\r\n    postText: string\r\n}\r\nexport const addPostActionCreator = (postText: string): AddPostActionCreatorType => ({type: ADD_POST, postText});\r\ntype SetUserProfileActionType = {\r\n    type: typeof SET_USER_PROFILE\r\n    profile: ProfileType\r\n}\r\nexport const setUserProfile = (profile: ProfileType): SetUserProfileActionType => ({type: SET_USER_PROFILE, profile});\r\ntype SetStatusActionType = {\r\n    type: typeof SET_STATUS\r\n    status: string\r\n}\r\nexport const setStatus = (status: string): SetStatusActionType => ({type: SET_STATUS, status});\r\ntype DeletePostActionType = {\r\n    type: typeof DELETE_POST\r\n    postId: number\r\n}\r\nexport const deletePost = (postId: number): DeletePostActionType => ({type: DELETE_POST, postId});\r\ntype SavePhotoSuccessActionType = {\r\n    type: typeof SAVE_PHOTO_SUCCESS\r\n    photos: PhotosType\r\n}\r\nexport const savePhotoSuccess = (photos: PhotosType): SavePhotoSuccessActionType => ({type: SAVE_PHOTO_SUCCESS, photos});\r\n\r\ntype GetStateType = () => AppStateType\r\ntype DispatchType = Dispatch<ActionsTypes>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n\r\nexport const getUserInformation = (userId: number): ThunkType => async (dispatch: DispatchType) => {\r\n    const response = await usersAPI.getUserProfile(userId);\r\n    dispatch(setUserProfile(response));\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch: DispatchType) => {\r\n    const response = await profileAPI.getStatus(userId)\r\n    dispatch(setStatus(response.data));\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch: DispatchType) => {\r\n    const response = await profileAPI.updateStatus(status)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setStatus(status));\r\n    }\r\n}\r\nexport const savePhoto = (file: any): ThunkType => async (dispatch: DispatchType) => {\r\n    const response = await profileAPI.savePhoto(file)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(savePhotoSuccess(response.data.data.photos));\r\n    }\r\n}\r\nexport const saveProfile = (profile: ProfileType) => async (dispatch: any, getState: any) => {\r\n    const userId = getState().auth.userId;\r\n    const response = await profileAPI.saveProfile(profile);\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(getUserInformation(userId));\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: response.data.messages[0]}));\r\n        return Promise.reject(response.data.messages[0]);\r\n    }\r\n}\r\n\r\nexport default profileReducer;"],"sourceRoot":""}